#!/bin/bash
set -e -o pipefail
SCRIPT="${0##*/}"

## Defaults
WG_WATCH_HOSTNAME="$(hostname -f)"
: "${WG_WATCH_STATE_DIR:=/var/tmp}"
: "${WG_WATCH_GRACE_PERIOD:=900}"
: "${WG_WATCH_SYSLOG_FACILITY:=}"
: "${WG_WATCH_EMAIL_RECIPIENT:=}"
: "${WG_WATCH_EMAIL_SUBJECT:=[SYSTEM:WIREGUARD] %(interface) @ ${WG_WATCH_HOSTNAME}}"
: "${WG_WATCH_EMAIL_FROM:=wg-watch@${WG_WATCH_HOSTNAME}}"
: "${WG_WATCH_EMAIL_FROM_NAME:=WireGuard monitoring agent (%(interface))}"


## Usage
__USAGE() {
  cat << EOF >&2
USAGE: ${SCRIPT} [<options>] <wg-interface>

SYNOPSIS:
  Monitors the specified WireGuard interface for its peers connection status.

OPTIONS:

  -G --grace <period> / env:WG_WATCH_GRACE_PERIOD [seconds]
    Peers disconnection grace period (default: ${WG_WATCH_GRACE_PERIOD})

  --syslog <facility> / env:WG_WATCH_SYSLOG_FACILITY
    Syslog facility (default: ${WG_WATCH_SYSLOG_FACILITY:-none})

  --email <recipient> / env:WG_WATCH_EMAIL_RECIPIENT
    Summary E-mail recipient (default: ${WG_WATCH_EMAIL_RECIPIENT:-none})

  --subject <string> / env:WG_WATCH_EMAIL_SUBJECT
    Summary E-mail subject (default: '${WG_WATCH_EMAIL_SUBJECT}')

  --from <sender> / env:WG_WATCH_EMAIL_FROM
    Summary E-mail sender (default: '${WG_WATCH_EMAIL_FROM}')

  --from-name <fullname> / env:WG_WATCH_EMAIL_FROM_NAME
    Summary E-mail sender full name (default: '${WG_WATCH_EMAIL_FROM_NAME}')

  --reset
    Reset peers connection state tracking

EOF
}
[ $# -lt 1 ] && __USAGE && exit 1

## Logging/prompting
WG_WATCH_LOG=()
__INFO() {
  msg="INFO[${SCRIPT}]: ${1}"
  WG_WATCH_LOG+=("${msg}")
  echo "${msg}"
  [ -n "${WG_WATCH_SYSLOG_FACILITY}" ] && logger -t "wg-watch@${ARG_IFACE}" -p "${WG_WATCH_SYSLOG_FACILITY}.info" "${msg}"
  return 0
}
__WARNING() {
  msg="WARNING[${SCRIPT}]: ${1}"
  WG_WATCH_LOG+=("${msg}")
  echo "${msg}" >&2
  [ -n "${WG_WATCH_SYSLOG_FACILITY}" ] && logger -t "wg-watch@${ARG_IFACE}" -p "${WG_WATCH_SYSLOG_FACILITY}.warning" "${msg}"
  return 0
}
__ERROR() {
  msg="ERROR[${SCRIPT}]: ${1}"
  WG_WATCH_LOG+=("${msg}")
  echo "${msg}" >&2
  [ -n "${WG_WATCH_SYSLOG_FACILITY}" ] && logger -t "wg-watch@${ARG_IFACE}" -p "${WG_WATCH_SYSLOG_FACILITY}.error" "${msg}"
  [ -n "${2}" ] && exit "${2}"
  return 0
}


## Arguments
OPT_RESET=
ARG_IFACE=
__OPTION() {
  [ -z "${2}" ] && __ERROR "Missing option parameter (${1})" 1
  return 0
}
while [ -n "${1}" ]; do
  case "${1}" in
    '-h'|'--help')
      __USAGE; exit 0
      ;;
    '-G'|'--grace')
      __OPTION "${@}"; WG_WATCH_GRACE_PERIOD="${2}"; shift
      ;;
    '--syslog')
      __OPTION "${@}"; WG_WATCH_SYSLOG_FACILITY="${2}"; shift
      ;;
    '--email')
      __OPTION "${@}"; WG_WATCH_EMAIL_RECIPIENT="${2}"; shift
      ;;
    '--subject')
      __OPTION "${@}"; WG_WATCH_EMAIL_SUBJECT="${2}"; shift
      ;;
    '--from')
      __OPTION "${@}"; WG_WATCH_EMAIL_FROM="${2}"; shift
      ;;
    '--from-name')
      __OPTION "${@}"; WG_WATCH_EMAIL_FROM_NAME="${2}"; shift
      ;;
    '--reset')
      OPT_RESET='yes'
      ;;
    -?*)
      __ERROR "Invalid option (${1})" 1
      ;;
    *)
      if [ -z "${ARG_IFACE}" ]; then
        ARG_IFACE="${1}"
      else
        __ERROR "Too many arguments (${1})" 1
      fi
      ;;
  esac
  shift
done
[ -z "${ARG_IFACE}" ] && __ERROR 'Missing <interface> argument' 1


## Parameters
WG_WATCH_STATE_FILE="${WG_WATCH_STATE_DIR%%/}/wg-watch@${ARG_IFACE}.dat"


## Main

# Reset ?
[ -n "${OPT_RESET}" ] && rm -f "${WG_WATCH_STATE_FILE}"

# State restore/load

# (previous)
declare -A WG_STATE_PREVIOUS
__mapitem_previous() {
    read -r _ peer endpoint allowed_ips last_handshake alerted _ <<<"${@}"
    WG_STATE_PREVIOUS[${peer}]="${endpoint} ${allowed_ips} ${last_handshake} ${alerted}"
}
if [ -r "${WG_WATCH_STATE_FILE}" ]; then
  mapfile -t -c 1 -C __mapitem_previous < "${WG_WATCH_STATE_FILE}"
fi

# (present)
declare -A WG_STATE
__mapitem() {
    read -r _ peer endpoint allowed_ips last_handshake _ <<<"${@}"
    WG_STATE[${peer}]="${endpoint} ${allowed_ips} ${last_handshake}"
}
mapfile -t -s 1 -c 1 -C __mapitem < <(wg show "${ARG_IFACE}" dump | awk '{print $1,$3,$4,$5}')

# State comparison
now="$(date +'%s')"
for peer in "${!WG_STATE[@]}"; do
  read -r endpoint allowed_ips last_handshake <<< "${WG_STATE[${peer}]}"
  elapsed_handshake=$(( now-last_handshake ))

  if [ -z "${WG_STATE_PREVIOUS[${peer}]}" ]; then
    WG_STATE_PREVIOUS[${peer}]="${endpoint} ${allowed_ips} ${last_handshake}"
    __INFO "Peer configured: ${peer} (${allowed_ips})"
    last_handshake_previous=0
    alerted=
  else
    read -r _ _ last_handshake_previous alerted <<< "${WG_STATE_PREVIOUS[${peer}]}"
  fi
  elapsed_handshake_previous=$(( now-last_handshake_previous ))

  if [ "${elapsed_handshake}" -gt "${WG_WATCH_GRACE_PERIOD}" ]; then
    if [ "${last_handshake}" != '0' ] && [ -z "${alerted}" ]; then
      WG_STATE_PREVIOUS[${peer}]="${endpoint} ${allowed_ips} ${last_handshake} alerted"
      __WARNING "Peer disconnected: ${peer} @ ${endpoint} (${allowed_ips}) since ${elapsed_handshake}s"
      alerted='yes'
    fi
  else
    WG_STATE_PREVIOUS[${peer}]="${endpoint} ${allowed_ips} ${last_handshake}"
    if [ -n "${alerted}" ]; then
      __INFO "Peer reconnected: ${peer} @ ${endpoint} (${allowed_ips}) after ${elapsed_handshake_previous}s"
    elif [ "${last_handshake_previous}" == '0' ]; then
      __INFO "Peer connected: ${peer} @ ${endpoint} (${allowed_ips})"
    fi
  fi
done
for peer in "${!WG_STATE_PREVIOUS[@]}"; do
  if [ -z "${WG_STATE[${peer}]}" ]; then
    read -r allowed_ips last_handshake <<< "${WG_STATE_PREVIOUS[${peer}]}"
    WG_STATE_PREVIOUS[${peer}]=
    __WARNING "Peer unconfigured: ${peer} (${allowed_ips})"
  fi
done

# State backup
touch "${WG_WATCH_STATE_FILE}.new"
for peer in "${!WG_STATE_PREVIOUS[@]}"; do
  [ -z "${WG_STATE_PREVIOUS[${peer}]}" ] && continue
  echo "${peer} ${WG_STATE_PREVIOUS[${peer}]}" >> "${WG_WATCH_STATE_FILE}.new"
done
mv "${WG_WATCH_STATE_FILE}.new" "${WG_WATCH_STATE_FILE}"

# E-mail summary
if [ "${#WG_WATCH_LOG[@]}" -gt 0 ] && [ -n "${WG_WATCH_EMAIL_RECIPIENT}" ]; then
  sendmail \
    -f "${WG_WATCH_EMAIL_FROM}" \
    -F "${WG_WATCH_EMAIL_FROM_NAME//%(interface)/${ARG_IFACE}}" \
    "${WG_WATCH_EMAIL_RECIPIENT}" \
  << EOF
Subject: ${WG_WATCH_EMAIL_SUBJECT//%(interface)/${ARG_IFACE}}
Date: $(date -R)

$(printf "%s\n" "${WG_WATCH_LOG[@]}")
EOF
fi
