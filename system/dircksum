#!/bin/bash
# REF: https://github.com/cedric-dufour/scriptisms/blob/master/system/dircksum
SCRIPT="${0##*/}"
VERSION='2.1.20210521a'

## Usage
__USAGE() {
  cat << EOF
USAGE: ${SCRIPT} [<option> ...] <directory> [<directory> ...]

SYSNOPSIS:
  Recursively compute and save/verify the checksum for the given directory.
  The checksum information will be saved in the '.dircksum' file within that
  directory.

OPTIONS:

  -V, --verbose
    Display computing progress (on 'stdout').

  -S, --silent
    Display only warnings and errors (on 'stderr').

  -C, --create
    Create missing checksum files.

  -D, --delete
    Delete the checksum file from the given directory and all its parent arbo-
    rescence.

  --delete-all
    Delete the checksum file from the given directory and both its parent and
    children arborescence.

  -v, --verify, -c, --check
    Verify existing checksum files.

  -p, --print
    Print computed checksum results to 'stdout'

  -d, --diff
    Print the unified diff between the current checksum file and its computed results
    (useful to investigate verification MISMATCH)

AUTHOR:
  Cedric Dufour - http://cedric.dufour.name
EOF
}
[ $# -lt 1 -o "${1##*-}" == 'help' ] && __USAGE >&2 && exit 3

# Arguments
EXIT=0
VERBOSE=
SILENT=
CREATE=
VERIFY=
DELETE=
PRINT=
DIFF=
VERSION='2'


## Checks
[ -z "$(which cksum)" ] && echo "ERROR[${SCRIPT}]: Missing checksumming binary (cksum)" >&2 && exit 2


## Trap signals

# SIGINT (CTRL-C)
trap 'echo "WARNING[${SCRIPT}]: Caught SIGINT!" >&2; exit 1' INT

# SIGTERM (kill)
trap 'echo "WARNING[${SCRIPT}]: Caught SIGTERM!" >&2; exit 1' TERM

# SIGUSR1, SIGUSR2
trap 'echo "INFO[${SCRIPT}]: Computing checksum for directory (${DIRECTORY})..."' USR1 USR2


## Functions

# Exit
function _exit {
  [ ${1} -gt ${EXIT} ] && EXIT=${1}
}

# Directory checksum
function _dircksum {
  # Arguments
  local DIRECTORY="${1}"
  local DEPTH="${2}"

  # Exclusions
  [ "${DIRECTORY##*/}" == '.git' ] && echo "INFO[${SCRIPT}]: Ignoring '.git' directory (${DIRECTORY})" >&2 && return 0

  # Compute checksum
  [ -n "${VERBOSE}" ] && echo "INFO[${SCRIPT}]: Computing checksum for directory (${DIRECTORY})..."
  local __dircksum; local __cksum=''; local __dirs=0; local __files=0; local __size=0; local __exit=0
  IFS=$'\n'

  # (recurse sub-directories)
  local __subdir
  for __subdir in $(find "${DIRECTORY}/" -mindepth 1 -maxdepth 1 -type d | sort); do
    if [ -z "${VERIFY}" ] && [ -e "${__subdir}/.dircksum" ]; then
      [ -z "${SILENT}" ] && echo "INFO[${SCRIPT}]: Using existing checksum (${__subdir})"
      continue
    fi
    _dircksum "${__subdir}" $(( ${DEPTH}+1 ))
    [ ${EXIT} -ne 0 ] && [ -z "${VERIFY}" ] && return ${EXIT}
  done

  # (necessary to loose CPU cycles?)
  if [ -z "${CREATE}" ] && [ -n "${VERIFY}" ]; then
    if [ ! -e "${DIRECTORY}/.dircksum" ] || [ ! -r "${DIRECTORY}/.dircksum" ]; then
      echo "WARNING[${SCRIPT}]: Missing/unreadable checksum file; can not verify checksum (${DIRECTORY})" >&2
      _exit 1; return ${EXIT}
    fi
  fi

  # (extract checksum from sub-directories 'dircksum' file)
  if [ "${VERSION}" == '1' ]; then
    # V1: Sort the checksums according to the sub-directories names.
    __dircksum=$( ( find "${DIRECTORY}/" -mindepth 1 -maxdepth 1 -type d | sort | sed 's/\/*$/\/.dircksum/' | xargs -d'\n' -r -n 1000 fgrep -h 'DIRCKSUM' 2>/dev/null ) | awk '{ if (NR==1) { CKSUM=$1; SIZE=$2; DIRS=$3+1; FILES=$4 } else { CKSUM=CKSUM":"$1; SIZE+=$2; DIRS+=$3+1; FILES+=$4 } }; END { if (NR>0) { printf "%s %.f %.f %.f\n",CKSUM,SIZE,DIRS,FILES } }'; exit ${PIPESTATUS[0]} ); __exit=$?
  elif [ "${VERSION}" == '2' ]; then
    # V2: Sort the checksums according to the cksum value instead of the sub-directories names.
    #     This allows to rename sub-directories without changing the result of the checksum.
    __dircksum=$( ( find "${DIRECTORY}/" -mindepth 1 -maxdepth 1 -type d | sed 's/\/*$/\/.dircksum/' | xargs -d'\n' -r -n 1000 fgrep -h 'DIRCKSUM' 2>/dev/null | sort -k1,1 -n ) | awk '{ if (NR==1) { CKSUM=$1; SIZE=$2; DIRS=$3+1; FILES=$4 } else { CKSUM=CKSUM":"$1; SIZE+=$2; DIRS+=$3+1; FILES+=$4 } }; END { if (NR>0) { printf "%s %.f %.f %.f\n",CKSUM,SIZE,DIRS,FILES } }'; exit ${PIPESTATUS[0]} ); __exit=$?
  fi
  if [ ${__exit} -ne 0 ]; then
    echo "ERROR[${SCRIPT}]: An error occured while reading the sub-directories checksum (${__exit})" >&2
    if [ -z "${VERIFY}" ]; then
      _exit 2; return ${EXIT}
    fi
  fi
  if [ -n "${__dircksum}" ]; then
    #echo "DEBUG: ${__dircksum}"
    __cksum=${__cksum}${__cksum:+:}${__dircksum%% *}; __dircksum=${__dircksum#* }
    __size=$(( ${__size} + ${__dircksum%% *} )); __dircksum=${__dircksum#* }
    __dirs=$(( ${__dirs} + ${__dircksum%% *} )); __dircksum=${__dircksum#* }
    __files=$(( ${__files} + ${__dircksum%% *} ))
  fi

  # (compute checksum for files in current directory)
  if [ "${VERSION}" == '1' ]; then
    # V1: Sort the checksums according to the files names.
    __filecksum="$( ( find "${DIRECTORY}/" -mindepth 1 -maxdepth 1 -type f -not -name '.dircksum' | sort | xargs -d'\n' -r -n 1000 cksum ) | sed 's|^\([^ ]*\) \([^ ]*\) \(.*\/\)\([^/]*\)$|\1 \2 \4|'; exit ${PIPESTATUS[0]} )"; __exit=$?
  elif [ "${VERSION}" == '2' ]; then
    # V2: Sort the checksums according to the cksum value instead of the files names.
    #     This allows to rename files without changing the result of the checksum.
    __filecksum="$( ( find "${DIRECTORY}/" -mindepth 1 -maxdepth 1 -type f -not -name '.dircksum' | xargs -d'\n' -r -n 1000 cksum | sort -k1,1 -n ) | sed 's|^\([^ ]*\) \([^ ]*\) \(.*\/\)\([^/]*\)$|\1 \2 \4|'; exit ${PIPESTATUS[0]} )"; __exit=$?
  fi
  if [ ${__exit} -ne 0 ]; then
    echo "ERROR[${SCRIPT}]: An error occured while performing the files checksum (${__exit})" >&2
    if [ -z "${VERIFY}" ]; then
      _exit 2; return ${EXIT}
    fi
  fi
  if [ -n "${__filecksum}" ]; then
    __dircksum=$( echo "${__filecksum}" | awk '{ if (NR==1) { CKSUM=$1; SIZE=$2; FILES=1 } else { CKSUM=CKSUM":"$1; SIZE+=$2; FILES+=1 } }; END { if (NR>0) { printf "%s %.f %.f\n",CKSUM,SIZE,FILES } }' )
    #echo "DEBUG: ${__dircksum}"
    __cksum=${__cksum}${__cksum:+:}${__dircksum%% *}; __dircksum=${__dircksum#* }
    __size=$(( ${__size} + ${__dircksum%% *} )); __dircksum=${__dircksum#* }
    __files=$(( ${__files} + ${__dircksum%% *} ))
  fi

  # (save checksum)
  __cksum=$(echo "${__cksum}" | cksum | cut -d' ' -f1)
  if [ ! -e "${DIRECTORY}/.dircksum" ] && [ -n "${CREATE}" ]; then
     cat << EOF > "${DIRECTORY}/.dircksum"
# CKSUM[cksum] SIZE[bytes] DIRS[count] FILES[count] DATE[iso]
${__cksum} ${__size} ${__dirs} ${__files} $(date +'%Y%m%dT%H%M%S') # DIRCKSUM (V:${VERSION})
# CKSUM[cksum] SIZE[bytes] FILE[name]
${__filecksum}
EOF
    [ $? -ne 0 ] && echo "ERROR[${SCRIPT}]: Failed to save checksum file (${DIRECTORY}/.dircksum)" >&2 && _exit 2 && return ${EXIT}
    [ -z "${SILENT}" ] && echo "INFO[${SCRIPT}]: Checksum saved (${DIRECTORY})"
  fi
  if [ -e "${DIRECTORY}/.dircksum" ] && [ ! -r "${DIRECTORY}/.dircksum" ]; then
    echo "WARNING[${SCRIPT}]: Unreadable checksum file (${DIRECTORY}/.dircksum)" >&2
    _exit 1; return ${EXIT}
  fi

  # (print checksum)
  if [ -n "${PRINT}" -a ${DEPTH} -eq 0 ]; then
    cat << EOF
# CKSUM[cksum] SIZE[bytes] DIRS[count] FILES[count] DATE[iso]
${__cksum} ${__size} ${__dirs} ${__files} $(date +'%Y%m%dT%H%M%S') # DIRCKSUM (V:${VERSION})
# CKSUM[cksum] SIZE[bytes] FILE[name]
${__filecksum}
EOF
  fi

  # (diff checksum)
  if [ -n "${DIFF}" -a ${DEPTH} -eq 0 ]; then
    if [ ! -r "${DIRECTORY}/.dircksum" ]; then
      echo "WARNING[${SCRIPT}: Missing/unreadable checksum file (${DIRECTORY}/.dircksum)" >&2
    else
      echo "--- ${DIRECTORY}/.dircksum"
      echo "+++ [computed]"
      cat << EOF | diff -uN "${DIRECTORY}/.dircksum" -
# CKSUM[cksum] SIZE[bytes] DIRS[count] FILES[count] DATE[iso]
${__cksum} ${__size} ${__dirs} ${__files} $(date +'%Y%m%dT%H%M%S') # DIRCKSUM (V:${VERSION})
# CKSUM[cksum] SIZE[bytes] FILE[name]
${__filecksum}
EOF
    fi
  fi

  # (verify checksum)
  if [ -n "${VERIFY}" ]; then
    __dircksum=$(fgrep -h 'DIRCKSUM' "${DIRECTORY}/.dircksum")
    local __cksum_check=${__dircksum%% *}; __dircksum=${__dircksum#* }
    local __size_check=${__dircksum%% *}; __dircksum=${__dircksum#* }
    local __dirs_check=${__dircksum%% *}; __dircksum=${__dircksum#* }
    local __files_check=${__dircksum%% *}
    if [ "${__cksum_check}" != "${__cksum}" -o "${__size_check}" != "${__size}" -o "${__dirs_check}" != "${__dirs}" -o "${__files_check}" != "${__files}" ]; then
      #echo "DEBUG: ${__cksum} ${__size} ${__dirs} ${__files} <-> ${__cksum_check} ${__size_check} ${__dirs_check} ${__files_check}" >&2
      echo "ERROR[${SCRIPT}]: Checksum MISMATCH (${DIRECTORY})" >&2 && _exit 2; return ${EXIT}
    else
      [ -z "${SILENT}" ] && echo "INFO[${SCRIPT}]: Checksum OK (${DIRECTORY})"
    fi
  fi

  # Done
  return ${EXIT}
}

# Delete checksum
function _delete {
  # Arguments
  local DIRECTORY="${1}"
  local DELETE="${2}"

  # Crawl down
  if [ "${DELETE}" == 'all' ]; then
    find "${DIRECTORY}/" -mindepth 2 -name .dircksum -delete
    [ $? -ne 0 ] && echo "ERROR[${SCRIPT}]: Failed to delete checksum files from sub-directories (${DIRECTORY}/.../.dircksum)" >&2 && _exit 2 && return ${EXIT}
  fi

  # Delete checksum
  if [ -e "${DIRECTORY}/.dircksum" ]; then
    rm -f "${DIRECTORY}/.dircksum"
    [ $? -ne 0 ] && echo "ERROR[${SCRIPT}]: Failed to delete checksum file (${DIRECTORY}/.dircksum)" >&2 && _exit 2 && return ${EXIT}
    [ -z "${SILENT}" ] && echo "INFO[${SCRIPT}]: Checksum deleted (${DIRECTORY})"
  fi

  # Crawl up
  local DIRECTORY_NEW="$(dirname "${DIRECTORY}")"
  [ "${DIRECTORY_NEW}" != "${DIRECTORY}" ] && _delete "${DIRECTORY_NEW}"
}

# Main
while [ -n "${1}" ]; do
  case "${1}" in
    '-V'|'--verbose')
      VERBOSE='yes'
      SILENT=
      ;;
    '-S'|'--silent')
      SILENT='yes'
      VERBOSE=
      ;;
    '-C'|'--create')
      CREATE='yes'
      DELETE=
      ;;
    '-D'|'--delete')
      DELETE='yes'
      CREATE=
      VERIFY=
      ;;
    '--delete-all')
      DELETE='all'
      CREATE=
      VERIFY=
      ;;
    '-v'|'--verify'|'-c'|'--check')
      VERIFY='yes'
      DELETE=
      ;;
    '-p'|'--print')
      SILENT='yes'
      PRINT='yes'
      DIFF=
      ;;
    '-d'|'--diff')
      SILENT='yes'
      DIFF='yes'
      PRINT=
      ;;
    '-1')
      VERSION='1'
      ;;
    *)
      if [ "${1:0:1}" == '-' ]; then
        echo "WARNING[${SCRIPT}]: Invalid option (${1})" >&2
      else
        DIRECTORY="${1%%/}"
        [ -z "${DIRECTORY}" ] && echo "WARNING[${SCRIPT}]: Please specify a directory" >&2 && shift && continue
        [ ! -d "${DIRECTORY}" ] && echo "WARNING[${SCRIPT}]: Missing/invalid directory (${DIRECTORY})" >&2 && shift && continue
        if [ -n "${DELETE}" ]; then
          pushd "${DIRECTORY}" >/dev/null
          DIRECTORY="$(pwd)"
          popd >/dev/null
          _delete "${DIRECTORY}" ${DELETE}
        else
          _dircksum "${DIRECTORY}" 0
        fi
        [ ${EXIT} -ne 0 ] && [ -z "${VERIFY}" -a -z "${DELETE}" ] && exit ${EXIT}
      fi
      ;;
  esac
  shift
done

# Done
[ ${EXIT} -ne 0 ] && echo "WARNING[${SCRIPT}]: Non-zero exit code (${EXIT})" >&2
exit ${EXIT}

