## OpenSSL Configuration for PAM, Kerberos and VPN authentication
#  REF: https://www.openssl.org/docs/manmaster/man5/config.html


## Environment (default)
OPENSSL_ROOT = "."
OPENSSL_DIR_CA = ${ENV::OPENSSL_ROOT}/CA
OPENSSL_DN_OU = "UNDEFINED::OPENSSL_DN_OU"
OPENSSL_DN_CN = "UNDEFINED::OPENSSL_DN_CN"
OPENSSL_EXT_SAN = "UNDEFINED::OPENSSL_EXT_SAN"
# Kerberos-specific
KERBEROS_REALM = ${ENV::OPENSSL_DN_OU}
# ActiveDirectory-specific
ACTIVEDIRECTORY_DOMAIN = ${ENV::OPENSSL_DN_OU}


## Initialization
openssl_conf = SSL_Configuration

[ SSL_Configuration ]
engines = SSL_Engines


## Engines
[ SSL_Engines ]
pkcs11 = ENG_PKCS11

# PKCS#11
# REF: https://github.com/OpenSC/libp11
[ ENG_PKCS11 ]
dynamic_path = /usr/lib/x86_64-linux-gnu/engines-1.1/libpkcs11.so
MODULE_PATH = /usr/lib/x86_64-linux-gnu/pkcs11/opensc-pkcs11.so


## Certificate Authority (CA) <-> openssl ca ...
#  REF: https://www.openssl.org/docs/manmaster/man1/openssl-ca.html

# OpenSSL entry point
[ ca ]
default_ca = ICA_Subcriber_Certificate

# Certificate (CA-signed)
[ ICA_Subcriber_Certificate ]
# (keypair)
private_key = ${ENV::OPENSSL_DIR_CA}/key.pem
certificate = ${ENV::OPENSSL_DIR_CA}/cert.pem
# (database)
database = ${ENV::OPENSSL_DIR_CA}/database
serial = ${ENV::OPENSSL_DIR_CA}/serial
crlnumber = ${ENV::OPENSSL_DIR_CA}/crlnumber
# (Certificate Revocation Lists, CRLs)
default_crl_days = 7
crl_extensions = ICA_CRL_Extensions
# (Subscriber certificates)
new_certs_dir = ${ENV::OPENSSL_DIR_CA}/certs
unique_subject = no
default_md = sha256
default_days = 366
name_opt = ca_default
cert_opt = ca_default
preserve = no
policy = ICA_Subject_Policy
copy_extensions = none
x509_extensions = ICA_Client_Extensions
string_mask = utf8only
utf8 = yes

# Subject (Distinguished Name, DN) policy
[ ICA_Subject_Policy ]
#countryName = match
#stateOrProvinceName = match
#localityName = match
organizationName = match
organizationalUnitName = match
commonName = supplied


## Certificate signing request (CSR) <-> openssl req -new ...
#  REF: https://www.openssl.org/docs/manmaster/man1/openssl-req.html

# OpenSSL entry point
[ req ]
default_md = sha256
prompt = no
distinguished_name = REQ_Subject
req_extensions = REQ_Extensions
string_mask = utf8only
utf8 = yes

# Subject (Distinguished Name, DN)
[ REQ_Subject ]
#countryName = "CH"
#stateOrProvinceName = "State"
#localityName = "City"
0.organizationName = "Example Corp."
organizationalUnitName = ${ENV::OPENSSL_DN_OU}
commonName = ${ENV::OPENSSL_DN_CN}


## Extensions
#  REFs:
#  - https://www.openssl.org/docs/manmaster/man5/x509v3_config.html
#  - https://www.openssl.org/docs/manmaster/man3/ASN1_generate_nconf.html
#  - http://k5wiki.kerberos.org/wiki/Pkinit_configuration
#  - https://support.microsoft.com/en-us/help/281245/guidelines-for-enabling-smart-card-logon-with-third-party-certificatio
#  DEBUG: openssl asn1parse -dump -strictpem -in <cert.pem>
#  WARNING: order matters!

# Certificate Revocation List (CRL)
[ ICA_CRL_Extensions ]
authorityKeyIdentifier = keyid:always

# Client certificate
[ ICA_Client_Extensions ]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
keyUsage = digitalSignature, keyEncipherment, keyAgreement
extendedKeyUsage = clientAuth, 1.3.6.1.5.2.3.4, 1.3.6.1.4.1.311.20.2.2
subjectAltName = otherName:1.3.6.1.5.2.2;SEQUENCE:SAN_Client_KerberosPrincipal, otherName:1.3.6.1.4.1.311.20.2.3;SEQUENCE:SAN_Client_ActiveDirectoryPrincipal, ${ENV::OPENSSL_EXT_SAN}
crlDistributionPoints = URI:http://example.org/pki/authentication-crl.der
nsCaPolicyUrl = http://example.org/pki/authentication-cp+cps.html

[ SAN_Client_KerberosPrincipal ]
realmName = EXPLICIT:0, GeneralString:${ENV::KERBEROS_REALM}
principalSequence = EXPLICIT:1, SEQUENCE:SAN_Client_KerberosPrincipalSequence

[ SAN_Client_KerberosPrincipalSequence ]
nameType = EXPLICIT:0, INTEGER:1
nameSequence = EXPLICIT:1, SEQUENCE:SAN_Client_KerberosPrincipalNames

[ SAN_Client_KerberosPrincipalNames ]
principalName = GeneralString:${ENV::OPENSSL_DN_CN}

[ SAN_Client_ActiveDirectoryPrincipal ]
principalName = UTF8:${ENV::OPENSSL_DN_CN}@${ENV::ACTIVEDIRECTORY_DOMAIN}

# Kerberos server (KDC) certificate
[ ICA_KDC_Server_Certificate_Extensions ]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
keyUsage = digitalSignature, nonRepudiation, keyEncipherment, keyAgreement
extendedKeyUsage = 1.3.6.1.5.2.3.5
subjectAltName = otherName:1.3.6.1.5.2.2;SEQUENCE:SAN_KDC_KerberosPrincipal,${ENV::OPENSSL_EXT_SAN}
crlDistributionPoints = URI:http://example.org/pki/authentication-crl.der
nsCaPolicyUrl = http://example.org/pki/authentication-cp+cps.html

[ SAN_KDC_KerberosPrincipal ]
realmName = EXPLICIT:0, GeneralString:${ENV::KERBEROS_REALM}
principalSequence = EXPLICIT:1, SEQUENCE:SAN_KDC_KerberosPrincipalSequence

[ SAN_KDC_KerberosPrincipalSequence ]
nameType = EXPLICIT:0, INTEGER:1
nameSequence = EXPLICIT:1, SEQUENCE:SAN_KDC_KerberosPrincipalNames

[ SAN_KDC_KerberosPrincipalNames ]
principalName1 = GeneralString:krbtgt
principalName2 = GeneralString:${ENV::KERBEROS_REALM}

# VPN server certificate
[ ICA_VPN_Server_Certificate_Extensions ]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
keyUsage = digitalSignature, keyAgreement
extendedKeyUsage = serverAuth
crlDistributionPoints = URI:http://example.org/pki/authentication-crl.der
nsCaPolicyUrl = http://example.org/pki/authentication-cp+cps.html

# VPN (host) client certificate
[ ICA_VPN_Client_Certificate_Extensions ]
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always
keyUsage = digitalSignature, keyAgreement
extendedKeyUsage = clientAuth
crlDistributionPoints = URI:http://example.org/pki/authentication-crl.der
nsCaPolicyUrl = http://example.org/pki/authentication-cp+cps.html

# Certificate Signing Request (CSR)
[ REQ_Extensions ]
basicConstraints = CA:FALSE
subjectAltName = ${ENV::OPENSSL_EXT_SAN}
# -> also see CA(-enforced) extensions (ICA_*_Extensions)
