#!/bin/bash
# REF: https://github.com/cedric-dufour/scriptisms/blob/master/system/yubikey-piv-easy
SCRIPT="${0##*/}"
VERSION='1.1.20240211a'
shopt -s nocasematch


## Helpers
_INFO() {
  [ -n "${OPT_VERBOSE}" ] && echo "INFO[${SCRIPT}${ARG_COMMAND:+:${ARG_COMMAND}}]: ${1}" >&2
  return 0
}
_NOTICE() {
  echo "NOTICE[${SCRIPT}${ARG_COMMAND:+:${ARG_COMMAND}}]: ${1}" >&2
  return 0
}
_WARNING() {
  echo "WARNING[${SCRIPT}${ARG_COMMAND:+:${ARG_COMMAND}}]: ${1}" >&2
  return 0
}
_ERROR() {
  echo "ERROR[${SCRIPT}${ARG_COMMAND:+:${ARG_COMMAND}}]: ${1}" >&2
  [ -n "${2}" ] && exit "${2}"
  return 0
}


## Defaults
DFLT_SLOT="${YUBIKEY_PIV_SLOT:-9a}"


## Parameters
: "${YUBIKEY_PIV_VERBOSE:=${VERBOSE}}"
: "${YUBIKEY_PIV_PIN_RETRIES:=3}"
: "${YUBIKEY_PIV_PUK_RETRIES:=5}"


## Source invocation ?
if [ ${BASH_LINENO[0]} -ne 0 ]; then
  case "${1}" in
    'set-mgmt-key')
      read -rsp 'Management key: ' p1 && echo
      read -rsp 'Management key (confirm): ' p2 && echo
      [ "${p1}" != "${p2}" ] && _ERROR 'Key/confirmation mismatch' && return 1
      export YUBIKEY_PIV_MGMT_KEY="${p1}"
      _INFO 'Management key successfully set (YUBIKEY_PIV_MGMT_KEY)'
      unset p1 p2
      ;;
  esac
  return 0
fi


## Usage
__USAGE() {
cat >&2 << EOF
USAGE: ${SCRIPT} <command> [options]

SYNOPSIS:
  An easy wrapper for everyday-use of Yubico's YubiKey PIV

COMMANDS:

  YubiKey PIV initialization                    -> ${SCRIPT} help-init
  Private keys management                       -> ${SCRIPT} help-key
  Public keys management                        -> ${SCRIPT} help-pub
  Certificate signing requests (CSR) management -> ${SCRIPT} help-req
  Certificates management                       -> ${SCRIPT} help-cert
  Attestation management                        -> ${SCRIPT} help-attest
  YubiKey variables dump                        -> ${SCRIPT} help-vars
  Prompt for and store the management key       -> source ${SCRIPT} set-mgmt-key

GLOBAL OPTIONS:

  +slot { 9a | 9c | 9d | ... }
    YubiKey PIV slot to operate on (default: ${DFLT_SLOT})

  -...
    Option passed "as is" to the YubiKey Manager utility

ENVIRONMENT:

  YUBIKEY_PIV_MGMT_KEY
    YubiKey management key

EOF
}

# Arguments
ARG_COMMAND=
OPT_SLOT="${DFLT_SLOT}"
OPT_VERBOSE="${YUBIKEY_PIV_VERBOSE}"
OPTS=()
ARGS=()
while [ -n "${1}" ]; do
  case "${1}" in

    '+slot')
      [ -z "${2}" ] && _ERROR "Missing option argument ($1)" 1
      case "${1}" in
        '+slot') OPT_SLOT="${2}";;
      esac
      shift
      ;;

    '+verbose')
      case "${1}" in
        '+verbose') OPT_VERBOSE='yes';;
      esac
      ;;

    'version'|'+version'|'--version')
      echo "${SCRIPT} ${VERSION}" && exit 0
      ;;

    'help'|'+help'|'--help')
      __USAGE && exit 0
      ;;

    +*)
      _ERROR "Invalid option (${1})" 1
      ;;

    -*)
      if [ "${2:0:1}" == '-' ]; then
        OPTS+=("${1}")
      else
        OPTS+=("${1}" "${2}")
        shift
      fi
      ;;

    *)
      if [ -z "${ARG_COMMAND}" ]; then
        ARG_COMMAND="${1}"
      else
        ARGS+=("${1}")
      fi
      ;;

  esac
  shift
done
export YUBIKEY_PIV_SLOT="${OPT_SLOT}"
export YUBIKEY_PIV_VERBOSE="${OPT_VERBOSE}"


## Environment

# Checks
[ -z  "$(which ykman)" ] && _ERROR 'Missing YubiKey Manager utility (ykman)' 1


## Helpers (cont'd)

# YubiKey
_YKMAN_vars() {
  ykman info \
  | sed -nE '/^\s/d;s|:\s*|:|;s|:$|:yes|;s|\s|_|g;s|^([_a-zA-Z0-9]*):([^'"'"']*)$|YKMAN_\1='"'"'\2'"'"'|p' \
  || return 1
  return 0
}

_YKPIV_vars() {
  ykman piv info \
  | sed -nE '/^\s/d;s|:\s*|:|;s|:$|:yes|;s|\s|_|g;s|^([_a-zA-Z0-9]*):([^'"'"']*)$|YKPIV_\1='"'"'\2'"'"'|p' \
  || return 1
  return 0
}


## Commands
case "${ARG_COMMAND}" in

  ########################################################################
  # Initialization

  'help-init') cat << EOF
USAGE: ${SCRIPT} <command> [options]

SYNOPSIS:
  YubiKey PIV initialization

COMMANDS:

  ${SCRIPT} init-key
    Initialize the YubiKey PIV
    Always safe (all actions are idempotent)

  ${SCRIPT} init-puk-pin
    Set the YubiKey PIV PUK and PIN codes
    WARNING! Make sure to store the PUK and PIN codes in a safe place!

  ${SCRIPT} change-puk / change-pin
    Change the YubiLey PIV PUK or PIN code

  ${SCRIPT} init-lock
    Lock the YubiKey PIV (set the management key)
    WARNING! Make sure to store the management key in a safe place!

  ${SCRIPT} init-unlock
    Unlock the YubiKey PIV (reset the management key to its default value)

  ${SCRIPT} init-reset
    Factory-reset the YubiKey PIV
    DANGEROUS!!! THE PIV DATA WILL BE IRREVOCABLY WIPED!!!

  ${SCRIPT} init-man, init-doc
    Show YubiKey Manager manual/documentation page

EOF
    ;;


  'init-man')
    man ykman || echo 'https://docs.yubico.com/software/yubikey/tools/ykman/Using_the_ykman_CLI.html'
    ;;


  'init-doc')
    echo 'https://docs.yubico.com/software/yubikey/tools/ykman/Using_the_ykman_CLI.html'
    ;;


  'init-key')
    # Dump the key status
    # shellcheck disable=SC2046
    eval $(_YKMAN_vars) || exit 1
    [ -z "${YKMAN_Serial_number}" ] && _ERROR 'Missing YubiKey serial number' 1
    # shellcheck disable=SC2046
    eval $(_YKPIV_vars) || exit 1
    [ -z "${YKMAN_PIV_number}" ] && _ERROR 'Missing YubiKey PIV version' 1

    # YubiKey PIV: Set the Card Holder Unique ID (CHUID) - REQUIRED for Microsoft Windows
    if [[ "${YKPIV_CHUID}" =~ ^no.data.avail ]]; then
      ykman piv objects generate \
        ${YUBIKEY_PIV_MGMT_KEY:+--management-key "${YUBIKEY_PIV_MGMT_KEY}"} \
        CHUID \
      || __ERROR 'Failed to set the YubiKey PIV CHUID' 1
      _INFO 'Successfully the YubiKey PIV CHUID'
    fi
    [ -n "${OPT_VERBOSE}" ] && yubico-piv-tool -a status | grep -i '^CHUID:'

    # YubiKey PIV: Set the Cardholder Capability Container (CCC) - REQUIRED for Apple Mac OS
    if [[ "${YKPIV_CCC}" =~ ^no.data.avail ]]; then
      ykman piv objects generate \
        ${YUBIKEY_PIV_MGMT_KEY:+--management-key "${YUBIKEY_PIV_MGMT_KEY}"} \
        CCC \
      || __ERROR 'Failed to set the YubiKey PIV CCC' 1
      _INFO "Successfully the YubiKey PIV CCC"
    fi
    [ -n "${OPT_VERBOSE}" ] && yubico-piv-tool -a status | grep -i '^CCC:'
    ;;


  'init-puk-pin')
    # Generate random PUK (8-digit)
    PUK=0
    while [ "${PUK}" -lt 10000000 ] || [ "$(echo "${PUK}" | fold -w1 | sort | uniq | wc -l)" -lt 4 ]; do
      PUK="$(( (16#$(openssl rand -hex 4)) % 100000000 ))"
    done

    # Generate random PIN (6-digit)
    PIN=0
    while [ "${PIN}" -lt 100000 ] || [ "$(echo "${PIN}" | fold -w1 | sort | uniq | wc -l)" -lt 4 ]; do
      PIN="$(( (16#$(openssl rand -hex 4)) % 1000000 ))"
    done

    # YubiKey PIV: Set PIN/PUK retries
    ykman piv access set-retries \
      ${YUBIKEY_PIV_MGMT_KEY:+--management-key "${YUBIKEY_PIV_MGMT_KEY}"} \
      "${YUBIKEY_PIV_PIN_RETRIES}" \
      "${YUBIKEY_PIV_PUK_RETRIES}" \
    || __ERROR 'Failed to set the PIN/PUK retries limit' 1
    _INFO "Successfully set the PIN/PUK retries limit (${YUBIKEY_PIV_PIN_RETRIES}/${YUBIKEY_PIV_PUK_RETRIES})"

    # YubiKey PIV: Set PUK (first, or it is definitely locked)
    ykman piv access change-puk \
      --puk 12345678 \
      --new-puk "${PUK}" \
    || __ERROR 'Failed to set the PUK code' 1
    _NOTICE "Successfully set the PUK code (${PUK})"

    # YubiKey PIV: Set PIN
    ykman piv access change-pin \
      --pin 123456 \
      --new-pin "${PIN}" \
    || __ERROR 'Failed to set the PIN code' 1
    _NOTICE "Successfully set the PIN code (${PIN})"
    ;;


  'change-puk')
    # YubiKey PIV: Change PUK
    ykman piv access change-puk \
    || __ERROR 'Failed to change the PUK code' 1
    _INFO 'Successfully changed the PUK code'
    ;;


  'change-pin')
    # YubiKey PIV: Change PIN
    ykman piv access change-pin \
    || __ERROR 'Failed to change the PIN code' 1
    _INFO 'Successfully changed the PIN code'
    ;;


  'init-lock')
    # Generate random management (24-bytes)
    KEY="$(openssl rand -hex 24)"

    # YubiKey PIV: Set Management Key
    ykman piv access change-management-key \
      ${YUBIKEY_PIV_MGMT_KEY:+--management-key "${YUBIKEY_PIV_MGMT_KEY}"} \
      --new-management-key "${KEY}" \
    || __ERROR 'Failed to set the management key' 1
    _NOTICE "Successfully set the management key (${KEY})"
    ;;


  'init-unlock')
    # YubiKey PIV: Reset Management Key
    ykman piv access change-management-key \
      ${YUBIKEY_PIV_MGMT_KEY:+--management-key "${YUBIKEY_PIV_MGMT_KEY}"} \
      --new-management-key '010203040506070801020304050607080102030405060708' \
    || __ERROR 'Failed to reset the management key' 1
    _INFO 'Successfully reset the management key'
    ;;


  'init-reset')
    # YubiKey PIV: Reset
    ykman piv reset \
    || __ERROR 'Failed to reset the YubiKey PIV' 1
    _INFO 'Successfully reset the YubiKey PIV'
    ;;


  ########################################################################
  # Private keys

  'help-key') cat << EOF
USAGE: ${SCRIPT} <command> [options]

SYNOPSIS:
  Private keys management

COMMANDS:

  ${SCRIPT} make-key [<public.pem>=stdout]
    Create a private key and ouput the corresponding public key
    (to stdout or specified file)

  ${SCRIPT} import-key [<key.pem>=stdin]
    Import an existing private key

(make-key)

  -a, --algorithm {RSA1024|RSA2048|ECCP256|ECCP384}
    Public cryptography algorithm (default: RSA2048)

EOF
    ;;


  'make-key')
    # YubiKey PIV: Generate private key
    ykman piv keys generate \
      ${YUBIKEY_PIV_MGMT_KEY:+--management-key "${YUBIKEY_PIV_MGMT_KEY}"} \
      "${YUBIKEY_PIV_SLOT}" \
      "${ARGS[0]:--}" \
      "${OPTS[@]}" \
    || _ERROR 'Failed to generate a new private key' 1
    _INFO 'Successfully generated a new private key'
    ;;


  'import-key')
    # YubiKey PIV: Import private key
    ykman piv keys import \
      ${YUBIKEY_PIV_MGMT_KEY:+--management-key "${YUBIKEY_PIV_MGMT_KEY}"} \
      "${YUBIKEY_PIV_SLOT}" \
      "${ARGS[0]:--}" \
      "${OPTS[@]}" \
    || _ERROR 'Failed to import private key' 1
    _INFO 'Successfully imported private key'
    ;;


  ########################################################################
  # Public key

  'help-pub') cat << EOF
USAGE: ${SCRIPT} <command> [options]

SYNOPSIS:
  Public key management

COMMANDS:

  ${SCRIPT} show-pub [<pub.pem>=stdout]
    Show the public key matching the YubiKey's private key

EOF
    ;;


  'show-pub')
    # YubiKey PIV: Read public key
    ykman piv keys export \
      ${YUBIKEY_PIV_MGMT_KEY:+--management-key "${YUBIKEY_PIV_MGMT_KEY}"} \
      "${YUBIKEY_PIV_SLOT}" \
      "${ARGS[0]:--}" \
      "${OPTS[@]}" \
    || _ERROR 'Failed to read public key' 1
    ;;


  ########################################################################
  # Certificate request

  'help-req') cat << EOF
USAGE: ${SCRIPT} <command> [options]

SYNOPSIS:
  Certificate signing requests (CSR) management

COMMANDS:

  ${SCRIPT} make-req --subject='CN=...' [<public.pem>=stdin] [<req.pem>=stdout]
    Create a certificate signing request (CSR) for the given public key

(make-req)

  -a, --hash-algorithm {SHA1|SHA256|SHA384|SHA512}
    Signature algorithm (default: SHA256)

EOF
    ;;


  'make-req')
    # YubiKey PIV: Create certificate signing request
    ykman piv certificates request \
      ${YUBIKEY_PIV_MGMT_KEY:+--management-key "${YUBIKEY_PIV_MGMT_KEY}"} \
      "${YUBIKEY_PIV_SLOT}" \
      "${ARGS[0]:--}" \
      "${ARGS[1]:--}" \
      "${OPTS[@]}" \
    || _ERROR 'Failed to create certificate signing request (CSR)' 1
    _INFO 'Successfully created certificate signing request (CSR)'
    ;;


  ########################################################################
  # Certificate

  'help-cert') cat << EOF
USAGE: ${SCRIPT} <command> [options]

SYNOPSIS:
  Certificates management

COMMANDS:

  ${SCRIPT} import-cert [<cert.pem>=stdin]
    Import an existing certificate

  ${SCRIPT} show-cert [<cert.pem>=stdout]
    Show the stored certificate

EOF
    ;;


  'import-cert')
    # YubiKey PIV: Import X.509 certificate
    ykman piv certificates import \
      ${YUBIKEY_PIV_MGMT_KEY:+--management-key "${YUBIKEY_PIV_MGMT_KEY}"} \
      "${YUBIKEY_PIV_SLOT}" \
      "${ARGS[0]:--}" \
      "${OPTS[@]}" \
    || _ERROR 'Failed to import certificate' 1
    _INFO 'Successfully imported certificate'
    ;;


  'show-cert')
    # YubiKey PIV: Show X.509 certificate
    ykman piv certificates export \
      "${YUBIKEY_PIV_SLOT}" \
      "${ARGS[0]:--}" \
      "${OPTS[@]}" \
    || _ERROR 'Failed to read certificate' 1
    ;;


  ########################################################################
  # Attestation

  'help-attest') cat << EOF
USAGE: ${SCRIPT} <command> [options]

SYNOPSIS:
  Attestation management

COMMANDS:

  ${SCRIPT} show-attest [<attest.pem>=stdout]
    Show the attestation certificate for the YubiKey private key

  ${SCRIPT} show-attest-ica [<ica.pem>=stdout]
    Show the YubiKey attestation Intermediate CA (ICA) certificate

  ${SCRIPT} show-attest-ca [<ca.pem>=stdout]
    Show the Yubico attestation Root CA (CA) certificate

  ${SCRIPT} verify-attest <cert.pem> <attest.pem> <ica.pem> [<ca.pem>]
    Verify the attestation of the given certificate

EOF
    ;;


  'show-attest')
    # YubiKey PIV: Generate the Attestation certificate
    ykman piv keys attest \
      "${YUBIKEY_PIV_SLOT}" \
      "${ARGS[0]:--}" \
      "${OPTS[@]}" \
    || _ERROR 'Failed to read the attestation certificate' 1
    ;;


  'show-attest-ica')
    # YubiKey PIV: Show the Intermediate Attestation CA certificate
    ykman piv certificates export \
      "f9" \
      "${ARGS[0]:--}" \
      "${OPTS[@]}" \
    || _ERROR 'Failed to read the YubiKey attestation Intermediate CA (ICA) certificate' 1
    ;;


  'show-attest-ca')
    wget -q -O- https://developers.yubico.com/PIV/Introduction/piv-attestation-ca.pem \
    || _ERROR 'Failed to download Yubico attestation Root CA (CA) certificate' 1
    ;;


  'verify-attest')
    # Arguments
    PEM_cert="${ARGS[0]}"
    PEM_attest="${ARGS[1]}"
    PEM_ica="${ARGS[2]}"
    PEM_ca="${ARGS[4]}"
    if [ -z "${PEM_ca}" ]; then
      _INFO 'Downloading/using Yubico attestation Root CA (CA) certificate'
      PEM_ca="$(mktemp --suffix=.pem)"
      # shellcheck disable=SC2064
      trap "rm -f '${PEM_ca}'" EXIT
      wget -q -O "${PEM_ca}" https://developers.yubico.com/PIV/Introduction/piv-attestation-ca.pem \
      || _ERROR 'Failed to download Yubico attestation Root CA (CA) certificate' 1
    fi

    # OpenSSL: Verify the certificate chain
    openssl verify \
      -CAfile "${PEM_ca}" \
      -untrusted "${PEM_ica}" \
      "${PEM_attest}" \
    || _ERROR 'Failed to verify attestation (along the provided CA/ICA)' 1
    _INFO 'Attestation successfully verified'

    # OpenSSL: Verify the modulus match
    MOD_attest="$(openssl x509 -noout -modulus -in "${PEM_attest}")"
    MOD_cert="$(openssl x509 -noout -modulus -in "${PEM_cert}")"
    if [ "${MOD_attest}" != "${MOD_cert}" ]; then
      _ERROR 'Certificate attestation failed (attestation does not match provided certificate)' 1
    fi
    _INFO 'Certificate successfully attested'
    ;;


  ########################################################################
  # Variables

  'help-vars') cat << EOF
USAGE: ${SCRIPT} <command> [options]

SYNOPSIS:
  YubiKey variables dump

COMMANDS:

  ${SCRIPT} vars-yk
    YubiKey status variables

  ${SCRIPT} vars-piv
    YubiKey PIV status variables

EOF
    ;;


  'vars-yk')
    _YKMAN_vars || exit 1
    ;;


  'vars-piv')
    _YKPIV_vars || exit 1
    ;;


  ########################################################################
  # (nope...)

  *)
    _ERROR 'Invalid command' 1

esac


## DONE!
exit 0
