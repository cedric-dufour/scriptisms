#!/bin/bash
set -e -o pipefail
SCRIPT="${0##*/}"
# shellcheck disable=SC2034
SCRIPT_DIR="$(dirname "$(realpath -e "${0}")")"
VERSION='1.0.20241206a'
trap 'echo "ERROR[${SCRIPT}${ARG_ACTION:+:${ARG_ACTION}}]: Internal error" >&2' ERR


## Helpers

# Usage
__USAGE() {
  cat >&2 << EOF
USAGE: ${SCRIPT} {[query]|reset|install-udev}

SYNOPSIS:
  Look for Huawei 3372-325 devices and switch them to HiLink mode if needs be.

NOTE:
  When present at boot, the Huawei 3372-325 will not be handled correctly by
  udev and will switch to Storage mode. The only way to switch it back to
  HiLink mode is to: first switch it to Stick (GSM modem) mode; then send it
  the "AT^RESET" command; the hope for udev to correctly "catch" it and coerce
  it to HiLink mode as it pops up back to life.

REFs:
  https://blog.tanatos.org/posts/huawei_e3372h-325_brovi_with_linux/
  https://blog.tanatos.org/posts/huawei_e3372h-325_brovi_with_linux_stickmode/
  https://www.draisberghof.de/usb_modeswitch/bb/viewtopic.php?t=3043
EOF
}

# Input/Output
__INFO() {
  [ -z "${OPT_SILENT}" ] && echo "INFO[${SCRIPT}${ARG_ACTION:+:${ARG_ACTION}}]: ${1}"
  return 0
}

__ERROR() {
  echo "ERROR[${SCRIPT}${ARG_ACTION:+:${ARG_ACTION}}]: ${1}" >&2
  [ -n "${2}" ] && exit "${2}"
  return 0
}


## Defaults
: "${VENDOR:=3566}"
: "${PRODUCT:=2001}"


## Constants
INTERFACE_CLASS_USB_STORAGE='08'
INTERFACE_CLASS_CDC_NCM='02'
INTERFACE_CLASS_CDC_RNDIS='e0'


## Arguments
OPT_SILENT=
ARG_ACTION=
while [ -n "${1}" ]; do
  case "${1}" in
    '-h'|'--help')
      __USAGE; exit 0
      ;;
    '-v'|'--version')
      echo "${SCRIPT} ${VERSION}"; exit 0
      ;;
    '--silent')
      OPT_SILENT='yes'
      ;;
    -*)
      __ERROR "Invalid option (${1})" 1
      ;;
    *)
      if [ -z "${ARG_ACTION}" ]; then
        ARG_ACTION="${1}"
      else
        __ERROR "Too many arguments (${1})" 1
      fi
      ;;
  esac
  shift
done
[ -z "${ARG_ACTION}" ] && ARG_ACTION='query'


## Checks
[ "${ARG_ACTION}" != 'query' ] && [ "$(id -u)" != '0' ] && __ERROR 'This utility must be run as root (sudo)' 1


## Actions

# install-udev
__DO_install_udev() {
  udev_rules="/etc/udev/rules.d/90-huawei-3372-325.rules"
  __INFO "Installing the udev rules: ${udev_rules}"
  cat > "${udev_rules}" << EOF
# Huawei 3372-325 specific modeswitch
# REF: https://www.draisberghof.de/usb_modeswitch/bb/viewtopic.php?t=3043
ACTION!="add", GOTO="huawei_3372_325_end"
SUBSYSTEM!="usb", GOTO="huawei_3372_325_end"

# All known install partitions are on interface 0
ATTRS{bInterfaceNumber}!="00", GOTO="huawei_3372_325_end"

# Only storage class devices are handled; negative filtering here would exclude some quirky devices
ATTRS{bInterfaceClass}=="${INTERFACE_CLASS_CDC_RNDIS}", GOTO="huawei_3372_325_begin"
GOTO="huawei_3372_325_end"

LABEL="huawei_3372_325_begin"
# When the device is plugged, it first is in "Stick" (RNDIS) mode... but then switches to "Storage" mode if
# no driver binds to it (the way Windows would do). Trick here is to "hold" the device in "Stick" mode
# by having usb_modeswitch read what it can from it (-W) for time long enough (-w) so it "thinks" a driver
# has bound, then reset it (while in "Stick" mode) to give it a proper start.
# (...?!? WTF ?!?...)
ATTRS{idVendor}=="${VENDOR}", ATTRS{idProduct}=="${PRODUCT}", RUN+="/sbin/usb_modeswitch -v ${VENDOR} -p ${PRODUCT} -R -W -w 500"
ATTRS{idVendor}=="${VENDOR}", ATTRS{idProduct}=="${PRODUCT}", RUN+="/sbin/usb_modeswitch -v ${VENDOR} -p ${PRODUCT} -R"

LABEL="huawei_3372_325_end"
EOF

udevadm control --reload
}

__DO_reset() {
  # We need the USB option module to be able to trigger the appearance of GSM
  # modem devices (ttyUSB*) one the stick swicthed to Stick (GSM modem) mode
  modprobe option

  # Find all devices currently in "Storage" mode and switch them to "Stick" mode
  do_sleep=
  while read -r subdev; do
    __INFO "${subdev##*/} device is currently in Storage mode; switching it to Stick mode"
    dev="${subdev%/*}"
    read busnum < "${dev}/busnum"
    read devnum < "${dev}/devnum"
    /sbin/usb_modeswitch -b "${busnum}" -g "${devnum}" -v "${VENDOR}" -p "${PRODUCT}" -X
    do_sleep='yes'
  done < <(
    find -L /sys/bus/usb/devices -maxdepth 1 -type d \
      -name '[0-9]*' \
      -exec grep -qswF "${VENDOR}" {}/idVendor \; \
      -exec grep -qswF "${PRODUCT}" {}/idProduct \; \
      -print0 \
    | find -L -files0-from - -maxdepth 1 -type d \
      -exec grep -qswF "${INTERFACE_CLASS_USB_STORAGE}" {}/bInterfaceClass \; \
      -print
  )

  # Wait for switched devices to stabilize
  if [ -n "${do_sleep}" ]; then
    __INFO "Waiting for devices to switch mode ..."
    sleep 15
  fi

  # Find all devices currently in "Stick" mode and switch them to "HiLink" mode
  do_sleep=
  while read -r subdev; do
    __INFO "${subdev##*/} device is currently in Stick mode; switching it to HiLink mode"
    dev="${subdev%/*}"
    readarray -t ttyUSBs < <(
      find -L "${dev}"/[0-9]* -maxdepth 1 -name 'ttyUSB*' | sed 's|^.*/ttyUSB|/dev/ttyUSB|'
    )
    echo 'AT^RESET' | tee "${ttyUSBs[@]}"
    do_sleep='yes'
  done < <(
    find -L /sys/bus/usb/devices -maxdepth 1 -type d \
      -name '[0-9]*' \
      -exec grep -qswF "${VENDOR}" {}/idVendor \; \
      -exec grep -qswF "${PRODUCT}" {}/idProduct \; \
      -print0 \
    | find -L -files0-from - -maxdepth 1 -type d \
      -exec grep -qswF "${INTERFACE_CLASS_CDC_NCM}" {}/bInterfaceClass \; \
      -print \
    || true
  )

  # Wait for switched devices to stabilize
  if [ -n "${do_sleep}" ]; then
    __INFO "Waiting for devices to switch mode ..."
    sleep 15
  fi
}

__DO_query() {
  # Find all devices currently in "HiLink" mode
  while read -r subdev; do
    __INFO "${subdev##*/} device is currently in HiLink mode"
  done < <(
    find -L /sys/bus/usb/devices -maxdepth 1 -type d \
      -name '[0-9]*' \
      -exec grep -qswF "${VENDOR}" {}/idVendor \; \
      -exec grep -qswF "${PRODUCT}" {}/idProduct \; \
      -print0 \
    | find -L -files0-from - -maxdepth 1 -type d \
      -exec grep -qswF "${INTERFACE_CLASS_CDC_RNDIS}" {}/bInterfaceClass \; \
      -print
  )
}


## Main

## Main
case "${ARG_ACTION}" in
  'install-udev')
    __DO_install_udev
    ;;
  'reset')
    __DO_reset
    __DO_query
    ;;
  'query')
    __DO_query
    ;;
  *)
    __ERROR "Invalid action (${ARG_ACTION:-n/a})" 1
    ;;
esac
exit 0
