#!/bin/bash
# -*- mode:bash; tab-width:2; sh-basic-offset:2; intent-tabs-mode:nil; -*- ex: set tabstop=2 expandtab: 
# REF: https://github.com/cedric-dufour/scriptisms/blob/master/system/luksvault
set -e -o pipefail
SCRIPT="${0##*/}"
VERSION='1.0.20230327a'
trap 'echo "ERROR[${SCRIPT}${ARG_ACTION:+:${ARG_ACTION}]: Internal error (${OPT_IMAGE:-n/a})" >&2' ERR


## Usage
__USAGE() {
  cat >&2 << EOF
USAGE: ${SCRIPT} [<options>] {create|check|start|stop}

SYNOPSIS:
  Create, start (open) or stop (close) a file-based LUKS encrypted partition.

OPTIONS:

  -I, --image <path>
    LUKS image file (default: /var/lib/vault/<UID>)

  -K, --key-file <path>
    LUKS key file (default: user is prompted for key, unless LUKSVAULT_KEY
    environment variable is defined)

  -M, --mountpoint <path>
    LUKS partition mountpoint (default: /tmp/vault/<UID>)

  -U, --uid <UID>
    User UID (default: root)

  -S, --size <size> [MiB]
    LUKS partition creation size (default: 50)
    NOTE: The actual image file size will be 10MiB larger to accomodate
          LUKS2 metadata and keyslots

EOF
}
[ $# -lt 1 ] && __USAGE && exit 1


## Logging
__INFO() {
  [ -n "${OPT_VERBOSE}" ] && echo "INFO[${SCRIPT}${ARG_ACTION:+:${ARG_ACTION}}]: ${1}"
  return 0
}
__WARNING() {
  echo "WARNING[${SCRIPT}${ARG_ACTION:+:${ARG_ACTION}}]: ${1}" >&2
  return 0
}
__ERROR() {
  echo "ERROR[${SCRIPT}${ARG_ACTION:+:${ARG_ACTION}}]: ${1}" >&2
  [ -n "${2}" ] && exit "${2}"
  return 0
}


## Arguments
OPT_IMAGE=
OPT_KEYFILE=
OPT_MOUNTPOINT=
OPT_UID='root'
OPT_SIZE='50'
OPT_LUKS1=
OPT_VERBOSE="${VERBOSE}"
ARG_ACTION=
__OPTION() {
  [ -z "${2}" ] && __ERROR "Missing option argument (${1})" 1
  return 0
}
while [ -n "${1}" ]; do
  case "${1}" in
    '-h'|'--help'|'help')
       __USAGE; exit 0
       ;;
    '-v'|'--version'|'version')
      echo "${SCRIPT} ${VERSION}"; exit 0
      ;;
    '-I'|'--image')
      __OPTION "${@}"; OPT_IMAGE="${2}"; shift
      ;;
    '-K'|'--keyfile')
      __OPTION "${@}"; OPT_KEYFILE="${2}"; shift
      ;;
    '-M'|'--mountpoint')
      __OPTION "${@}"; OPT_MOUNTPOINT="${2}"; shift
      ;;
    '-U'|'--uid')
      __OPTION "${@}"; OPT_UID="${2}"; shift
      ;;
    '-S'|'--size')
      __OPTION "${@}"; OPT_SIZE="${2}"; shift
      ;;
    '-1'|'--luks1')
      OPT_LUKS1='yes'
      ;;
    '--verbose')
      OPT_VERBOSE='yes'
      ;;
    -*)
      __ERROR "Invalid option (${1})" 1
      ;;
    *)
      if [ -z "${ARG_ACTION}" ]; then
        ARG_ACTION="${1}"
      else
        __ERROR "Too many arguments (${1})" 1
      fi
      ;;
  esac
  shift
done
[ -z "${OPT_IMAGE}" ] && OPT_IMAGE="/var/lib/vault/${OPT_UID}"
[ -z "${OPT_MOUNTPOINT}" ] && OPT_MOUNTPOINT="/tmp/vault/${OPT_UID}"
OPT_SIZE="$((OPT_SIZE+10))" # Accomodate LUKS metadata and keyslots


## Checks
[ "$(id -u)" != '0' ] && __ERROR "This utility must be run as root (sudo)" 1
[ -z "$(which cryptsetup)" ] && __ERROR "Missing the 'cryptsetup' utility (apt-get install cryptsetup-bin)" 1


## Helpers

# luksFormat
__luksFormat() {
  __INFO "Formatting the LUKS volume (${OPT_IMAGE})"
  if [ -n "${OPT_LUKS1}" ]; then
    LUKS_OPTIONS='--type luks1'
  else
    LUKS_OPTIONS='--type luks2 --luks2-keyslots-size 8M --pbkdf argon2id'
  fi
  if [ -n "${OPT_KEYFILE}" ]; then
    # shellcheck disable=SC2086
    cryptsetup luksFormat --batch-mode ${LUKS_OPTIONS} --key-file "${OPT_KEYFILE}" "${OPT_IMAGE}" || return $?
  elif [ -n "${LUKSVAULT_KEY}" ]; then
    # shellcheck disable=SC2086
    printf '%s' "${LUKSVAULT_KEY}" \
      | cryptsetup luksFormat --batch-mode ${LUKS_OPTIONS} --key-file - "${OPT_IMAGE}" || return $?
  else
    # shellcheck disable=SC2086
    cryptsetup luksFormat --batch-mode ${LUKS_OPTIONS} --verify-passphrase "${OPT_IMAGE}" || return $?
  fi
  return 0
}

# luksOpen
__luksOpen() {
  __INFO "Opening the LUKS volume (${OPT_IMAGE})"
  if [ -n "${OPT_KEYFILE}" ]; then
    cryptsetup luksOpen --key-file "${OPT_KEYFILE}" "${OPT_IMAGE}" "${DEV_MAPPER}" || return $?
  elif [ -n "${LUKSVAULT_KEY}" ]; then
    printf '%s' "${LUKSVAULT_KEY}" \
      | cryptsetup luksOpen --key-file - "${OPT_IMAGE}" "${DEV_MAPPER}" || return $?
  else
    cryptsetup luksOpen "${OPT_IMAGE}" "${DEV_MAPPER}" || return $?
  fi
  return 0
}


## Actions

# create
__DO_create() {
  # Check image file
  [ -e "${OPT_IMAGE}" ] && __ERROR "LUKS image file already exists (${OPT_IMAGE})" 1

  # Check/create mountpoint
  umask 022
  if [ ! -d "${OPT_MOUNTPOINT}" ]; then
    __INFO "Creating the mountpoint (${OPT_MOUNTPOINT})"
    mkdir -p "${OPT_MOUNTPOINT}" || true
  fi
  if [ ! -d "${OPT_MOUNTPOINT}" ] || [ ! -w "${OPT_MOUNTPOINT}" ]; then
    __ERROR "Invalid/unwritable mountpoint (${OPT_MOUNTPOINT})" 1
  fi
  umask 077

  # Create image file
  # shellcheck disable=SC2064
  trap "rm -f '${OPT_IMAGE}'" EXIT
  __INFO "Initializing LUKS image file with random data (${OPT_IMAGE}: ${OPT_SIZE}MiB)"
  if ! dd status=progress if=/dev/urandom of="${OPT_IMAGE}" bs=1M count="${OPT_SIZE}"; then
    __ERROR "Failed to initialize LUKS image file (${OPT_IMAGE})" 1
  fi

  # Format LUKS volume
  if ! __luksFormat; then
    __ERROR "Failed to format LUKS volume (${OPT_IMAGE})" 1
  fi

  # Open LUKS volume
  # shellcheck disable=SC2064
  trap "__DO_stop; rm -f '${OPT_IMAGE}'" EXIT
  if ! __luksOpen; then
    __ERROR "Failed to open LUKS volume (${OPT_IMAGE})" 1
  fi

  # Create filesystem
  __INFO "Creating the filesystem (${OPT_IMAGE})"
  if ! mke2fs -t ext4 -m 0 "/dev/mapper/${DEV_MAPPER}"; then
    __ERROR "Failed to create filesystem (${OPT_IMAGE} <-> /dev/mapper/${DEV_MAPPER})" 1
  fi

  # Mount filesystem
  __INFO "Mounting and initializing the filesystem (${OPT_IMAGE} -> ${OPT_MOUNTPOINT})"
  if ! mount "/dev/mapper/${DEV_MAPPER}" "${OPT_MOUNTPOINT}"; then
    __ERROR "Failed to mount filesystem (${OPT_IMAGE} -> ${OPT_MOUNTPOINT})" 1
  fi
  if ! chmod 700 "${OPT_MOUNTPOINT}" || ! chown "${OPT_UID}:nogroup" "${OPT_MOUNTPOINT}"; then
    __ERROR "Failed to change filesystem permissions" 1
  fi

  # Done
  trap - EXIT
  __INFO "LUKS vault created (${OPT_IMAGE})"
  cryptsetup luksDump "${OPT_IMAGE}" || true
  __DO_stop
}

# fsck
__DO_fsck() {
  # Check mountpoint
  if mountpoint -q "${OPT_MOUNTPOINT}"; then
    __ERROR "LUKS vault is started (${OPT_MOUNTPOINT})" 1
  fi

  # Check image file
  if [ ! -e "${OPT_IMAGE}" ]; then
    __ERROR "Invalid/missing LUKS image file (${OPT_IMAGE})" 1
  fi

  # Open LUKS volume
  trap '__DO_stop' EXIT
  if ! __luksOpen; then
    __ERROR "Failed to open LUKS volume (${OPT_IMAGE})" 1
  fi

  # Filesystem check
  __INFO "Checking the filesystem (${OPT_IMAGE})"
  e2fsck -f "/dev/mapper/${DEV_MAPPER}" || true

  # Done
  trap - EXIT
  __DO_stop
}

# start
__DO_start() {
  # Check/create mountpoint
  if mountpoint -q "${OPT_MOUNTPOINT}"; then
    __WARNING "LUKS vault is already started (${OPT_MOUNTPOINT})"
    exit 0
  fi
  umask 022
  if [ ! -d "${OPT_MOUNTPOINT}" ]; then
    __INFO "Creating the mountpoint (${OPT_MOUNTPOINT})"
    mkdir -p "${OPT_MOUNTPOINT}" || true
  fi
  if [ ! -d "${OPT_MOUNTPOINT}" ] || [ ! -w "${OPT_MOUNTPOINT}" ]; then
    __ERROR "Invalid/unwritable mountpoint (${OPT_MOUNTPOINT})" 1
  fi
  umask 077

  # Check image file
  if [ ! -e "${OPT_IMAGE}" ]; then
    __ERROR "Invalid/missing LUKS image file (${OPT_IMAGE})" 1
  fi

  # Check we're not already started
  if [ -n "$(losetup -a | grep -F "${OPT_IMAGE}" | cut -d':' -f1 | tail -n 1)" ]; then
    __ERROR "LUKS image already loop-mounted" 1
  fi

  # Open LUKS volume
  trap '__DO_stop' EXIT
  if ! __luksOpen; then
    __ERROR "Failed to open LUKS volume (${OPT_IMAGE})" 1
  fi

  # Mount filesystem
  __INFO "Mounting the filesystem (${OPT_IMAGE} -> ${OPT_MOUNTPOINT})"
  if ! mount "/dev/mapper/${DEV_MAPPER}" "${OPT_MOUNTPOINT}"; then
    __ERROR "Failed to mount filesystem (${OPT_IMAGE} on ${OPT_MOUNTPOINT})" 1
  fi

  # Done
  trap - EXIT
  __INFO "LUKS vault ready to use (${OPT_IMAGE} on ${OPT_MOUNTPOINT})"
}

# stop
__DO_stop() {
  trap - EXIT
  w=0

  # Unmount filesystem
  if mountpoint -q "${OPT_MOUNTPOINT}"; then
    __INFO "Unmounting the filesystem (${OPT_MOUNTPOINT})"
    if ! umount "${OPT_MOUNTPOINT}"; then
      __WARNING "Failed to unmount the filesystem (${OPT_MOUNTPOINT})"
      w=1
    fi
  fi

  # Close LUKS volume
  if [ -e "/dev/mapper/${DEV_MAPPER}" ]; then
    __INFO "Closing the LUKS volume (${OPT_IMAGE})"
    if ! cryptsetup luksClose "${DEV_MAPPER}"; then
      __WARNING "Failed to close the LUKS volume (${DEV_MAPPER})"
      w=1
    fi
    sleep 1
  fi

  # Done
  if [ ${w} -ne 0 ]; then
    __WARNING "Failed to stop LUKS vault properly (${OPT_IMAGE} on ${OPT_MOUNTPOINT})"
    exit ${w}
  else
    __INFO "LUKS vault stopped (${OPT_IMAGE} on ${OPT_MOUNTPOINT})"
  fi
}


## Main
DEV_MAPPER="luks.$(echo "${OPT_MOUNTPOINT}" | md5sum | sed -nE 's|^(.{16}).*$|\1|p')"
case "${ARG_ACTION}" in
  'create'|'init')
    __DO_create
    ;;
  'check'|'fsck')
    __DO_fsck
    ;;
  'start'|'open')
    __DO_start
    ;;
  'stop'|'close')
    __DO_stop
    ;;
  *)
    __ERROR "Invalid action (${ARG_ACTION:-n/a})" 1
    ;;
esac
exit 0
