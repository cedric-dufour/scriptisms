#!/bin/bash
set -e -o pipefail
SCRIPT="${0##*/}"
# shellcheck disable=SC2034
SCRIPT_DIR="$(dirname "$(readlink -e "${0}")")"
trap 'echo "ERROR[${SCRIPT}]: Internal error (${EXOSCALE_BACKUP_fullname:-n/a})" >&2' ERR

## Defaults
: "${EXOSCALE_BACKUP_NAME:=$(hostname -s)}"
: "${EXOSCALE_BACKUP_TIMESTAMP_FORMAT:=%Y%m%d}"
: "${EXOSCALE_BACKUP_ENCRYPT_KEY_PUBLIC:=/etc/exoscale/rclone/backup-pub.pem}"
: "${EXOSCALE_BACKUP_ENCRYPT_KEY_PRIVATE:=/etc/exoscale/rclone/backup-key.pem}"
: "${EXOSCALE_BACKUP_RCLONE_CONFIG:=/etc/exoscale/rclone/backup.conf}"
: "${EXOSCALE_BACKUP_RCLONE_PROFILE:=sos-ch-dk-2}"
: "${EXOSCALE_BACKUP_REMOTE_PATH:=$(hostname -d | tr '.' '\n' | tac | tr '\n' '.')exo.backup}"
: "${EXOSCALE_BACKUP_SOURCE_PATH:=/var/backups}"
: "${EXOSCALE_BACKUP_RETENTION_KEEP:=0}"


## Usage
__USAGE() {
  cat >&2 <<EOF
USAGE: ${SCRIPT} [<options>] {backup|restore|clean|list|env}

SYNOPSIS:
  Encrypt and backup the given source directory to Exoscale SOS using Rclone.
  Data is encrypted using Rclone 'crypt' module, with the (symmetric) passwords
  being generated randomly for each backup and asymmetrically encrypted to be
  stored along the (remote) backup data (folder).

OPTIONS:

  -n, --name, env:EXOSCALE_BACKUP_NAME
    Backup name (default: hostname -s), corresponding to the remote (timestamped) folder
    created to host the backup material

  -t, --timestamp, env:EXOSCALE_BACKUP_TIMESTAMP
    Backup timestamp (digits only!) (default: date +<timestamp-format>)

  -tf, --timestamp-format, env:EXOSCALE_BACKUP_TIMESTAMP_FORMAT
    Backup timestamp format (default: %Y%m%d)

  -u, --key-public, env:EXOSCALE_BACKUP_ENCRYPT_KEY_PUBLIC
    Public (asymmetric) encryption key (default: /etc/exoscale/rclone/backup-pub.pem)

  -v, --key-private, env:EXOSCALE_BACKUP_ENCRYPT_KEY_PRIVATE
    Private (asymmetric) encryption key (default: /etc/exoscale/rclone/backup-key.pem)

  -c, --config, env:EXOSCALE_BACKUP_RCLONE_CONFIG
    Rclone configuration file path (default: /etc/exoscale/rclone/backup.conf)

  -p, --profile, env:EXOSCALE_BACKUP_RCLONE_PROFILE
    Rclone (non-encrypted) profile name (default: sos)
    The crypted profile will be automatically computed by adding the '_crypt' suffix (example: sos_crypt)

  -r, --remote, env:EXOSCALE_BACKUP_REMOTE_PATH
    Remote path, including bucket name and optional sub-directories (default: exoscale-rclone-backup)

  -s, --source, env:EXOSCALE_BACKUP_SOURCE_PATH
    Source folder path (default: /var/backups)

  -d, --restore, env:EXOSCALE_BACKUP_RESTORE_PATH
    Restore folder path (default: timestamped backup name in current directory)

  -k, --keep, env:EXOSCALE_BACKUP_RETENTION_KEEP
    Quantity of (former) backups to keep, in addition to the current one (default: 0)
    If lower than zero, no cleanup is performed

  -e, --environment-file
    Load options from environment file and EXO_BACKUP_* variables (default: none)
    WARNING: Order in respect with other options matters!

EOF
}
[ $# -lt 1 ] && __USAGE && exit 1

# Arguments
EXOSCALE_BACKUP_action=
__OPTION() {
  [ -z "${2}" ] && echo "ERROR[${SCRIPT}]: Missing option parameter (${1})" >&2 && exit 1
  return 0
}
while [ -n "${1}" ]; do
  case "${1}" in
    'help'|'--help'|'-h')
      __USAGE; exit 1;;
    '-n'|'--name')
      __OPTION "${@}"; EXOSCALE_BACKUP_NAME="${2}"; shift;;
    '-t'|'--timestamp')
      __OPTION "${@}"; EXOSCALE_BACKUP_TIMESTAMP="${2}"; shift;;
    '-tf'|'--timestamp-format')
      __OPTION "${@}"; EXOSCALE_BACKUP_TIMESTAMP_FORMAT="${2}"; shift;;
    '-u'|'--key-public')
      __OPTION "${@}"; EXOSCALE_BACKUP_ENCRYPT_KEY_PUBLIC="${2}"; shift;;
    '-v'|'--key-private')
      __OPTION "${@}"; EXOSCALE_BACKUP_ENCRYPT_KEY_PRIVATE="${2}"; shift;;
    '-c'|'--config')
      __OPTION "${@}"; EXOSCALE_BACKUP_RCLONE_CONFIG="${2}"; shift;;
    '-p'|'--profile')
      __OPTION "${@}"; EXOSCALE_BACKUP_RCLONE_PROFILE="${2}"; shift;;
    '-r'|'--remote')
      __OPTION "${@}"; EXOSCALE_BACKUP_REMOTE_PATH="${2}"; shift;;
    '-s'|'--source')
      __OPTION "${@}"; EXOSCALE_BACKUP_SOURCE_PATH="${2}"; shift;;
    '-d'|'--restore')
      __OPTION "${@}"; EXOSCALE_BACKUP_RESTORE_PATH="${2}"; shift;;
    '-k'|'--keep')
      __OPTION "${@}"; EXOSCALE_BACKUP_RETENTION_KEEP="${2}"; shift;;
    '-e'|'--environment-file')
      # shellcheck source=exoscale-rclone-backup.default
      source <(sed -nE "s/^\s*(EXOSCALE_BACKUP[_A-Z]*=([0-9]*|'[^']*'))\s*(#.*)?\$/\1/p" "${2}")
      shift;;
    -*)
      echo "ERROR[${SCRIPT}]: Invalid option (${1})" >&2 && exit 1;;
    *)
      if [ -z "${EXOSCALE_BACKUP_action}" ]; then
        EXOSCALE_BACKUP_action="${1}"
      else
        echo "ERROR[${SCRIPT}]: Invalid argument (${1})" >&2 && exit 1
      fi
      ;;
  esac
  shift
done

# (context)
SCRIPT="${SCRIPT}(${EXOSCALE_BACKUP_NAME})"

# Validation
case "${EXOSCALE_BACKUP_action}" in
  'backup'|'restore'|'clean'|'ls'|'list'|'env') ;;
  *) echo "ERROR[${SCRIPT}]: Invalid action (${EXOSCALE_BACKUP_action:-n/a})" >&2 && exit 1
esac


## Helpers

# Rclone password generator
__rclone_crypt_password() {
  # WARNING: 'rclone config' will choke on (obscured) password starting with '-'!
  local password
  while [ -z "${password}" ] || [ "${password:0:1}" == '-' ]; do
    password="$(openssl rand -base64 24 | rclone obscure -)"
  done
  echo "${password}"
}


## Setup

# Environment
if [ "${EXOSCALE_BACKUP_action}" == 'env' ]; then
  cat <<EOF
EXOSCALE_BACKUP_NAME='${EXOSCALE_BACKUP_NAME}'
EXOSCALE_BACKUP_TIMESTAMP_FORMAT='${EXOSCALE_BACKUP_TIMESTAMP_FORMAT}'
EXOSCALE_BACKUP_ENCRYPT_KEY_PUBLIC='${EXOSCALE_BACKUP_ENCRYPT_KEY_PUBLIC}'
EXOSCALE_BACKUP_ENCRYPT_KEY_PRIVATE='${EXOSCALE_BACKUP_ENCRYPT_KEY_PRIVATE}'
EXOSCALE_BACKUP_RCLONE_CONFIG='${EXOSCALE_BACKUP_RCLONE_CONFIG}'
EXOSCALE_BACKUP_RCLONE_PROFILE='${EXOSCALE_BACKUP_RCLONE_PROFILE}'
EXOSCALE_BACKUP_REMOTE_PATH='${EXOSCALE_BACKUP_REMOTE_PATH}'
EXOSCALE_BACKUP_SOURCE_PATH='${EXOSCALE_BACKUP_SOURCE_PATH}'
EXOSCALE_BACKUP_RETENTION_KEEP=${EXOSCALE_BACKUP_RETENTION_KEEP}
EOF
  exit 0
fi

# Configuration
RCLONE_CONFIG="$(mktemp --suffix='.rclone.conf')"
# shellcheck disable=SC2064
trap "rm -f '${RCLONE_CONFIG}'" EXIT
cat "${EXOSCALE_BACKUP_RCLONE_CONFIG}" > "${RCLONE_CONFIG}"
export RCLONE_CONFIG

# Timestamp
if [ -z "${EXOSCALE_BACKUP_TIMESTAMP}" ]; then
  EXOSCALE_BACKUP_TIMESTAMP="$(date +"${EXOSCALE_BACKUP_TIMESTAMP_FORMAT}")"
fi

# Path/name
EXOSCALE_BACKUP_fullname="${EXOSCALE_BACKUP_TIMESTAMP}-${EXOSCALE_BACKUP_NAME}"
EXOSCALE_BACKUP_rclone_plain_path="${EXOSCALE_BACKUP_RCLONE_PROFILE}:/${EXOSCALE_BACKUP_REMOTE_PATH%%/}"
if [ "${EXOSCALE_BACKUP_action}" == 'restore' ]; then
  [ -z "${EXOSCALE_BACKUP_RESTORE_PATH}" ] && EXOSCALE_BACKUP_RESTORE_PATH="./${EXOSCALE_BACKUP_fullname}.d"
  mkdir -p "${EXOSCALE_BACKUP_RESTORE_PATH}"
  if [ -n "$(find "${EXOSCALE_BACKUP_RESTORE_PATH}" -mindepth 1)" ]; then
    echo "ERROR[${SCRIPT}]: Restoration folder is not empty (${EXOSCALE_BACKUP_RESTORE_PATH})" >&2
    exit 1
  fi
fi


## Main

# List
if [ "${EXOSCALE_BACKUP_action}" == 'ls' ] || [ "${EXOSCALE_BACKUP_action}" == 'list' ]; then
  rclone lsf "${EXOSCALE_BACKUP_rclone_plain_path}/" \
    | sed -nE "s|^([0-9]{4,}-${EXOSCALE_BACKUP_NAME}).d/\$|\1|p"
  exit 0
fi

# Crypted backend
# REF: https://rclone.org/crypt/
if [ "${EXOSCALE_BACKUP_action}" == 'backup' ] || [ "${EXOSCALE_BACKUP_action}" == 'restore' ]; then
  if [ "${EXOSCALE_BACKUP_action}" == 'backup' ]; then
    # Generate random backup (symmetric) passwords
    EXOSCALE_BACKUP_rclone_crypt_password="$(__rclone_crypt_password)"
    EXOSCALE_BACKUP_rclone_crypt_password2="$(__rclone_crypt_password)"
  else
    # Retrieve and decrypt (asymmetrically) encrypted backup (symmetric) passwords
    EXOSCALE_BACKUP_rclone_crypt_password="$(
      rclone cat "${EXOSCALE_BACKUP_rclone_plain_path}/${EXOSCALE_BACKUP_fullname}.key" \
      | base64 -d \
      | openssl pkeyutl -decrypt -inkey "${EXOSCALE_BACKUP_ENCRYPT_KEY_PRIVATE}"
    )"
    echo "INFO[${SCRIPT}]: Encryption key retrieval successful (${EXOSCALE_BACKUP_fullname}.key)"
    EXOSCALE_BACKUP_rclone_crypt_password2="${EXOSCALE_BACKUP_rclone_crypt_password#*:}"
    EXOSCALE_BACKUP_rclone_crypt_password="${EXOSCALE_BACKUP_rclone_crypt_password%:*}"
  fi
  rclone config create --no-obscure "${EXOSCALE_BACKUP_RCLONE_PROFILE}_crypt" crypt \
    remote "${EXOSCALE_BACKUP_RCLONE_PROFILE}:" \
    filename_encryption off \
    directory_name_encryption false \
    password "${EXOSCALE_BACKUP_rclone_crypt_password}" \
    password2 "${EXOSCALE_BACKUP_rclone_crypt_password2}" \
  >/dev/null
  EXOSCALE_BACKUP_rclone_crypt_path="${EXOSCALE_BACKUP_RCLONE_PROFILE}_crypt:/${EXOSCALE_BACKUP_REMOTE_PATH%%/}"
  echo "INFO[${SCRIPT}]: Crypted backend configuration successful (${EXOSCALE_BACKUP_RCLONE_PROFILE}_crypt)"
fi

# Backup/restore
if [ "${EXOSCALE_BACKUP_action}" == 'backup' ]; then
  # (cleanup; REQUIRED; Encryption keys change at each run!)
  if [ -n "$(rclone lsf "${EXOSCALE_BACKUP_rclone_plain_path}/${EXOSCALE_BACKUP_fullname}.d")" ]; then
    echo "WARNING[${SCRIPT}]: Purging previous backup (${EXOSCALE_BACKUP_fullname}.d)" >&2
    rclone purge "${EXOSCALE_BACKUP_rclone_plain_path}/${EXOSCALE_BACKUP_fullname}.d"
  fi
  if [ -n "$(rclone lsf "${EXOSCALE_BACKUP_rclone_plain_path}/${EXOSCALE_BACKUP_fullname}.key")" ]; then
    rclone deletefile "${EXOSCALE_BACKUP_rclone_plain_path}/${EXOSCALE_BACKUP_fullname}.key"
  fi

  # (backup)
  rclone copy "${EXOSCALE_BACKUP_SOURCE_PATH}" "${EXOSCALE_BACKUP_rclone_crypt_path}/${EXOSCALE_BACKUP_fullname}.d"
  echo "INFO[${SCRIPT}]: Backup successful (${EXOSCALE_BACKUP_fullname}.d)"
elif [ "${EXOSCALE_BACKUP_action}" == 'restore' ]; then
  rclone copy "${EXOSCALE_BACKUP_rclone_crypt_path}/${EXOSCALE_BACKUP_fullname}.d" "${EXOSCALE_BACKUP_RESTORE_PATH}"
  echo "INFO[${SCRIPT}]: Restore successful (${EXOSCALE_BACKUP_RESTORE_PATH})"
fi

# Asymmetrically encrypt and backup (symmetric) passwords
if [ "${EXOSCALE_BACKUP_action}" == 'backup' ]; then
  echo "${EXOSCALE_BACKUP_rclone_crypt_password}:${EXOSCALE_BACKUP_rclone_crypt_password2}" \
    | openssl pkeyutl -encrypt -pubin -inkey "${EXOSCALE_BACKUP_ENCRYPT_KEY_PUBLIC}" \
    | base64 \
    | rclone rcat "${EXOSCALE_BACKUP_rclone_plain_path}/${EXOSCALE_BACKUP_fullname}.key"
  echo "INFO[${SCRIPT}]: Encryption key backup successful (${EXOSCALE_BACKUP_fullname}.key)"
fi

# Retention
if [ "${EXOSCALE_BACKUP_action}" == 'clean' ]; then
  file="${EXOSCALE_BACKUP_fullname}"
  echo "INFO[${SCRIPT}]: Deleting old backup resources (${file}.{d,key}) ..."
  rclone deletefile "${EXOSCALE_BACKUP_rclone_plain_path}/${file}.key" || true
  rclone purge "${EXOSCALE_BACKUP_rclone_plain_path}/${file}.d" || true
elif [ "${EXOSCALE_BACKUP_action}" == 'backup' ] && [ "${EXOSCALE_BACKUP_RETENTION_KEEP}" -ge 0 ]; then
  i=0
  while read -r file; do
    i="$((i+1))"
    [ "${i}" -le "${EXOSCALE_BACKUP_RETENTION_KEEP}" ] && continue
    echo "INFO[${SCRIPT}]: Deleting old backup resources (${file%.d/}.{d,key})"
    rclone purge "${EXOSCALE_BACKUP_rclone_plain_path}/${file%/}" || true
    rclone deletefile "${EXOSCALE_BACKUP_rclone_plain_path}/${file%.d/}.key" || true
  done < <(
    rclone lsf "${EXOSCALE_BACKUP_rclone_plain_path}/" \
      | grep -E "^[0-9]{4,}-${EXOSCALE_BACKUP_NAME}.d/\$" \
      | grep -v "^${EXOSCALE_BACKUP_fullname}.d/\$" \
      | sort -r
  )
fi


## Done
exit 0
