#!/bin/bash
# -*- mode:bash; tab-width:2; sh-basic-offset:2; intent-tabs-mode:nil; -*- ex: set tabstop=2 expandtab:
# REF: https://github.com/cedric-dufour/scriptisms/blob/master/misc/pseudonymize
set -e -o pipefail
SCRIPT="${0##*/}"
# shellcheck disable=SC2034
SCRIPT_DIR="$(dirname "$(realpath -e "${0}")")"
VERSION='1.0.20231129'
trap 'echo "ERROR[${SCRIPT}]: Internal error" >&2' ERR


## Usage
__USAGE() {
  cat >&2 << EOF
USAGE: ${SCRIPT} [<options>] [<file/list>:stdin]

SYNOPSIS:
  Anonymize/pseudonymize the given data.
  By default, data are anonymized using SHA256-HMAC-ed and a secret randomly
  derived for each entry.
  Using the --pseudonymize option, data are pseudonymized using SHA256-HMAC
  along the specified secret. It is thus possible, knowing the original entry
  and that secret, to recover the same pseudonym.

OPTIONS:

  -P, --pseudonymize <secret>
    Pseudonymization secret (for SHA256-HMAC)

  -S, --separator <separator>
    Separator between the original entry and its pseudonym (default: tab)

  -a, --algorithm <algo>
    Hashing algorithm, as reported by 'openssl dgst -list' (default: sha256)

  -f, --format <format>
    Pseudonym format (default: hex)

  -l, --length <format>
    Pseudonym length

  -p, --prefix <prefix>
    Pseudonym prefix

  -s, --suffix <suffix>
    Pseudonym suffix

  --sed
    Output a sed-compatible script (man sed)

  -h, --help
    Display this usage information and exit

  -v, --version
    Display this script version and exit

EOF
}


## Logging
__ERROR() {
  echo "ERROR[${SCRIPT}}]: ${1}" >&2
  [ -n "${2}" ] && exit "${2}"
  return 0
}


## Arguments
OPT_SECRET=
OPT_SEPARATOR=$'\t'
OPT_ALGO='sha256'
OPT_FORMAT='hex'
OPT_PREFIX=
OPT_LENGTH=256
OPT_SUFFIX=
OPT_SED=
ARG_INPUT=
__OPTION() {
  [ -z "${2}" ] && __ERROR "Missing option argument (${1})" 1
  return 0
}
while [ -n "${1}" ]; do
  case "${1}" in
    '-h'|'--help')
      __USAGE; exit 0
      ;;
    '-v'|'--version')
      echo "${SCRIPT} ${VERSION}"; exit 0
      ;;
    '-P'|'--pseudoymize')
      __OPTION "${@}"; OPT_SECRET="${2}"; shift
      ;;
    '-S'|'--separator')
      __OPTION "${@}"; OPT_SEPARATOR="${2}"; shift
      ;;
    '-a'|'--algo')
      __OPTION "${@}"; OPT_ALGO="${2}"; shift
      ;;
    '-f'|'--format')
      __OPTION "${@}"; OPT_FORMAT="${2}"; shift
      ;;
    '-l'|'--length')
      __OPTION "${@}"; OPT_LENGTH="${2}"; shift
      ;;
    '-p'|'--prefix')
      __OPTION "${@}"; OPT_PREFIX="${2}"; shift
      ;;
    '-s'|'--suffix')
      __OPTION "${@}"; OPT_SUFFIX="${2}"; shift
      ;;
    '--sed')
      OPT_SED='yes'
      ;;
    -*)
      __ERROR "Invalid option (${1})" 1
      ;;
    *)
      if [ -z "${ARG_INPUT}" ]; then
        ARG_INPUT="${1}"
      else
        __ERROR "Too many arguments (${1})" 1
      fi
      ;;
  esac
  shift
done
[ -z "${ARG_INPUT}" ] && ARG_INPUT='-'


## Format
if [ "${OPT_FORMAT}" = 'hex' ]; then
  formatter='basenc -w0 --base16'
elif [ "${OPT_FORMAT}" = 'base32' ]; then
  formatter='basenc -w0 --base32'
elif [ "${OPT_FORMAT}" = 'base64' ]; then
  formatter='basenc -w0 --base64'
else
  __ERROR "Invalid format: ${OPT_FORMAT}" 1
fi

## Main
while IFS= read -r line; do
  [ -n "${OPT_SECRET}" ] && secret="${OPT_SECRET}" || secret="$(openssl rand -base64 33)"
  pseudo="$(echo -n "${line}" | openssl dgst "-${OPT_ALGO}" -hmac "${secret}" -binary | ${formatter} | cut -c 1-${OPT_LENGTH})"
  pseudo="${OPT_PREFIX}${pseudo}${OPT_SUFFIX}"
  if [ -n "${OPT_SED}" ]; then
    printf "s|${line}|${pseudo}|g\n"
  else
    echo "${line}${OPT_SEPARATOR}${pseudo}"
  fi
done < <(grep -v '^\s*#' "${ARG_INPUT}")

