#!/bin/bash
SCRIPT="${0##*/}"

## Usage
__USAGE() {
  cat >&2 <<EOF
USAGE: ${SCRIPT} [<option> ...] <source-dir/file> <destination-dir/file>

SYNOPSIS:
  Downsample or transcode (to JPEG format) all image files found in the source
  directory to the destination directory (keeping the same structure).
  This script is "thread-safe", meaning that it can be executed concurrently
  with the same arguments in order to benefit from multiple CPUs/cores.

OPTIONS:
  -g, --gauge     Size gauge, in pixels (px) [default:1024]

  -q, --quality   JPEG encoding quality [default:80]

AUTHOR:
  Cedric Dufour - http://cedric.dufour.name
EOF
}
[ $# -lt 2 ] && __USAGE && exit 1

# Arguments
SIZE_GAUGE=1024
JPEG_QUALITY=80
__OPTION() {
  [ -z "${2}" ] && echo "ERROR[${SCRIPT}]: Missing option parameter (${1})" >&2 && exit 1
  return 0
}
while [ -n "${1}" ]; do
  case "${1}" in
    '-h'|'--help'|'help')
      __USAGE; exit 1;;
    '-g'|'--gauge')
      __OPTION "${@}"; SIZE_GAUGE="${2}"; shift;;
    '-q'|'--quality')
      __OPTION "${@}"; JPEG_QUALITY="${2}"; shift;;
    -*)
        echo "ERROR[${SCRIPT}]: Invalid option (${1})" >&2; exit 1;;
    *)
      if [ -z "${SRC}" ]; then
        SRC="${1}"
      elif [ -z "${DST}" ]; then
        DST="${1}"
      else
        echo "ERROR[${SCRIPT}]: Invalid argument (${1})" >&2; exit 1
      fi
      ;;
  esac
  shift
done

# Check dependencies (and format support)
[ -z "$(which convert)" ] && echo "ERROR[$$]: 'convert' cannot be found" >&2 && exit 1

# Check directories and files
if [ ! -f "${SRC}" ]; then
  SRC=${SRC%%/}
  DST=${DST%%/}
  [ ! -d "${SRC}" ] && echo "ERROR[${SCRIPT}($$)]: Invalid source directory (${SRC})" >&2 && exit 1
  [ ! -r "${SRC}" ] && echo "ERROR[${SCRIPT}($$)]: Unable to read from source directory (${SRC})" >&2 && exit 1
  [ ! -d "${DST}" ] && echo "ERROR[${SCRIPT}($$)]: Invalid destination directory (${DST})" >&2 && exit 1
  [ ! -w "${DST}" ] && echo "ERROR[${SCRIPT}($$)]: Unable to write to destination directory (${DST})" >&2 && exit 1
fi


## Helper functions

# Lock
DST_LOCK="${DST}/.lock"
__atomic_begin() {
  n=100; while true; do # loop for ~5 seconds (100 x 0.05 seconds in average)
    n=$(( n-1 ))
    [ ${n} -le 0 ] && echo "ERROR[${SCRIPT}($$)]: Failed to acquire lock (${DST_LOCK})" >&2 && exit 1
    [ $(( n % 10 )) -eq 0 ] && echo "WARNING[${SCRIPT}($$)]: Waiting for lock (${DST_LOCK})" >&2
    if ( set -o noclobber; echo -n > "${DST_LOCK}" ) 2>/dev/null; then
      break
    fi
    sleep 0.0$(( RANDOM % 10 ))
  done
}
__atomic_end() {
  rm -f "${DST_LOCK}"
}

# Transcode
__transcode() {
  p_src="${1}"
  p_dst="${2}"

  # Transcoding
  echo "INFO[${SCRIPT}($$)]: Transcoding ${p_src} -> ${p_dst}"

  # Downsample/transcode image file
  eval "convert \"${p_src}\" -resize '${SIZE_GAUGE}x${SIZE_GAUGE}>' -quality ${JPEG_QUALITY} +profile '*' \"${p_dst}\""
}


## Main

# Trap signals
trap 'echo "INTERRUPT[${SCRIPT}($$)]: Cleaning and aborting" >&2; rm -f "${DST_LOCK}" "${p_dst}"; exit 2' INT TERM

# Loop through image files
if [ -f "${SRC}" ]; then
  p_src="${SRC}"
  p_dst="${DST%.*}.jpg"

  # Transcoding
  if ! __transcode "${p_src}" "${p_dst}"; then
    echo "ERROR[${SCRIPT}($$)]: An error occured while transcoding (${p_src} -> ${p_dst}); skipping..." >&2
    exit 1
  fi
else
  echo "INFO[${SCRIPT}($$)]: Looking for files to transcode..."
  IFS=$'\n'
  for p_src in $(eval "find '${SRC}' \( -type f -o -type l \) \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png' -o -iname '*.gif' -o -iname '*.tif' -o -iname '*.tiff'  \)" | sort); do
    # Compute source parameters
    d_src="$(dirname "${p_src}")"
    [ -e "${d_src}/.nodownsample" ] && continue

    # Compute destination parameters
    p_dst="${p_src%.*}.jpg"
    p_dst="${DST}/${p_dst#${SRC}/}"
    d_dst="$(dirname "${p_dst}")"

    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[${SCRIPT}($$)]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[${SCRIPT}($$)]: Unable to write to destination directory (${d_dst}): skipping..." >&2 && continue

    # Check destination file
    __atomic_begin
    [ -e "${p_dst}" ] && __atomic_end && continue
    touch "${p_dst}"
    __atomic_end

    # Transcoding
    if ! __transcode "${p_src}" "${p_dst}"; then
      echo "WARNING[${SCRIPT}($$)]: An error occured while transcoding (${p_src} -> ${p_dst}); skipping..." >&2
      continue
    fi
  done
fi

# Done
echo "INFO[${SCRIPT}($$)]: Done"
exit 0
