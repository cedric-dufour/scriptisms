#!/bin/bash
SCRIPT="${0##*/}"

## Usage
__USAGE() {
  cat >&2 <<EOF
USAGE: ${SCRIPT} [<option> ...] <source-dir/file> <destination-dir/file>

SYNOPSIS:
  Downsample or transcode (to MP3 format) all audio files found in the source
  directory to the destination directory (keeping the same structure).
  Supported (source) formats are WAV, MP3, AAC/M4A, FLAC.
  This script is "thread-safe", meaning that it can be executed concurrently
  with the same arguments in order to benefit from multiple CPUs/cores.

OPTIONS:
  -b, --bitrate   Target bitrate, in kilobit per second (kbs) [default:128]
                  This is used only to prevent re-encoding source MP3 files that
                  are below the given bitrate.

  -l, --lameopts  LAME options [default:--preset standard]

  -c, --comment   ID3 comment [default:LAME options]

AUTHOR:
  Cedric Dufour - http://cedric.dufour.name
EOF
}
[ $# -lt 2 ] && __USAGE && exit 1

# Arguments
TARGET_KBS=128
LAME_OPTS='--preset standard'
LAME_COMMENT='#AUTO#'
__OPTION() {
  [ -z "${2}" ] && echo "ERROR[${SCRIPT}]: Missing option parameter (${1})" >&2 && exit 1
  return 0
}
while [ -n "${1}" ]; do
  case "${1}" in
    '-h'|'--help'|'help')
      __USAGE; exit 1;;
    '-b'|'--bitrate')  
      __OPTION "${@}"; TARGET_KBS="${2}"; shift;;
    '-l'|'--lameopts')
      __OPTION "${@}"; LAME_OPTS="${2}"; shift;;
    '-c'|'--comment')
      __OPTION "${@}"; LAME_COMMENT="${2}"; shift;;
    -*)
        echo "ERROR[${SCRIPT}]: Invalid option (${1})" >&2; exit 1;;
    *)
      if [ -z "${SRC}" ]; then
        SRC="${1}"
      elif [ -z "${DST}" ]; then
        DST="${1}"
      else
        echo "ERROR[${SCRIPT}]: Invalid argument (${1})" >&2; exit 1
      fi
      ;;
  esac
  shift
done

# Check dependencies (and format support)
[ -z "$(which lame)" ] && echo "ERROR[${SCRIPT}($$)]: 'lame' cannot be found" >&2 && exit 1
AAC_INCL='yes'; [ -z "$(which faad)" ] && echo "WARNING[${SCRIPT}($$)]: 'faad' cannot be found; '*.m4a' files will not be transcoded" >&2 && AAC_INCL=
FLAC_INCL='yes'; [ -z "$(which flac)" ] && echo "WARNING[${SCRIPT}($$)]: 'flac' cannot be found; '*.flac' files will not be transcoded" >&2 && FLAC_INCL=
ID3_INCL='yes'; [ -z "$(which id3info)" ] && echo "WARNING[${SCRIPT}($$)]: 'id3info' cannot be found; tags will not be retrieved from '*.mp3' files" >&2 && ID3_INCL=
METAFLAC_INCL='yes'; [ -z "$(which metaflac)" ] && echo "WARNING[${SCRIPT}($$)]: 'metaflac' cannot be found; tags will not be retrieved from '*.flac' files" >&2 && METAFLAC_INCL=

# Check directories and files
if [ ! -f "${SRC}" ]; then
  SRC=${SRC%%/}
  DST=${DST%%/}
  [ ! -d "${SRC}" ] && echo "ERROR[${SCRIPT}($$)]: Invalid source directory (${SRC})" >&2 && exit 1
  [ ! -r "${SRC}" ] && echo "ERROR[${SCRIPT}($$)]: Unable to read from source directory (${SRC})" >&2 && exit 1
  [ ! -d "${DST}" ] && echo "ERROR[${SCRIPT}($$)]: Invalid destination directory (${DST})" >&2 && exit 1
  [ ! -w "${DST}" ] && echo "ERROR[${SCRIPT}($$)]: Unable to write to destination directory (${DST})" >&2 && exit 1
fi


## Helper functions

# Lock
DST_LOCK="${DST}/.lock"
__atomic_begin() {
  n=100; while true; do # loop for ~5 seconds (100 x 0.05 seconds in average)
    n=$(( n-1 ))
    [ ${n} -le 0 ] && echo "ERROR[${SCRIPT}($$)]: Failed to acquire lock (${DST_LOCK})" >&2 && exit 1
    [ $(( n % 10 )) -eq 0 ] && echo "WARNING[${SCRIPT}($$)]: Waiting for lock (${DST_LOCK})" >&2
    if ( set -o noclobber; echo -n > "${DST_LOCK}" ) 2>/dev/null; then
      break
    fi
    sleep 0.0$(( RANDOM % 10 ))
  done
}
__atomic_end() {
  rm -f "${DST_LOCK}"
}

# Transcoding
__transcode() {
  p_src="${1}"
  p_dst="${2}"

  # Transcoding
  echo "INFO[${SCRIPT}($$)]: Transcoding ${p_src} -> ${p_dst}"

  # Extract tags from file
  tt=; tl=; ta=; tn=; ty=; br=
  e_src="${p_src##*.}"
  case "${e_src}" in

    'mp3')
      if [ -n "${ID3_INCL}" ]; then
        IFS=$'\n'
        for tag in $(id3info "${p_src}" | grep -Fi '(TIT2|TALB|TPE1|TRCK|TYER|Bitrate)' | awk -F ': ' 'BEGIN {OFS="|"} {print $1,$2}' | sed 's/.*\(TIT2\|TALB\|TPE1\|TRCK\|TYER\|Bitrate\).*|/\1|/i' | iconv -f latin1 -t utf8 ); do
          key="${tag%%|*}"
          case "${key^^}" in
            'TIT2') tt="${tag##*|}";;
            'TALB') tl="${tag##*|}";;
            'TPE1') ta="${tag##*|}";;
            'TRCK') tn="${tag##*|}";;
            'TYER') ty="${tag##*|}";;
            'BITRATE') br="$(echo "${tag##*|}" | sed 's/[^0-9]//g')";;
          esac
        done
      fi
      ;;

    'aac'|'m4a'|'mp4')
      IFS=$'\n'
      for tag in $(faad --info "${p_src}" 2>&1 | grep -Fi '^(TITLE|ALBUM|ARTIST|TRACK|DATE):' | awk -F ': ' 'BEGIN {OFS="|"} {print $1,$2}' | sed 's/.*\(TITLE\|ALBUM\|ARTIST\|TRACK\|DATE\).*|/\1|/i' ); do
        key="${tag%%|*}"
        case "${key^^}" in
          'TITLE') tt="${tag##*|}";;
          'ALBUM') tl="${tag##*|}";;
          'ARTIST') ta="${tag##*|}";;
          'TRACK') tn="${tag##*|}";;
          'DATE') ty="${tag##*|}";;
        esac
      done
      ;;

    'flac')
      if [ -n "${METAFLAC_INCL}" ]; then
        IFS=$'\n'
        for tag in $(metaflac --export-tags-to=- "${p_src}" | grep -Fi '^(TITLE|ALBUM|ARTIST|TRACKNUMBER|DATE)=' | awk -F '=' 'BEGIN {OFS="|"} {print $1,$2}' | sed 's/.*\(TITLE\|ALBUM\|ARTIST\|TRACKNUMBER\|DATE\).*|/\1|/i' ); do
          key="${tag%%|*}"
          case "${key^^}" in
            'TITLE') tt="${tag##*|}";;
            'ALBUM') tl="${tag##*|}";;
            'ARTIST') ta="${tag##*|}";;
            'TRACKNUMBER') tn="${tag##*|}";;
            'DATE') ty="${tag##*|}";;
          esac
        done
      fi
      ;;

  esac
  tags=
  [ -n "${tt}" ] && tags="${tags} --tt \"${tt}\""
  [ -n "${tl}" ] && tags="${tags} --tl \"${tl}\""
  [ -n "${ta}" ] && tags="${tags} --ta \"${ta}\""
  [ -n "${tn}" ] && tags="${tags} --tn \"${tn}\""
  [ -n "${ty}" ] && tags="${tags} --ty \"${ty}\""
  [ -n "${LAME_COMMENT}" ] && tags="${tags} --tc \"${LAME_COMMENT}\" "
  [ -n "${tags}" ] && tags="--add-id3v2 --id3v2-latin1 ${tags}"

  # Downsample/transcode audio file
  if [ "${e_src}" == 'mp3' ] && [ -n "${br}" ] && [ "${br}" -le "${TARGET_KBS}" ]; then
    eval "cp \"${p_src}\" \"${p_dst}\""
  else
    case "${e_src}" in

      'wav'|'mp3')
        eval "lame --silent ${LAME_OPTS} ${tags} \"${p_src}\" \"${p_dst}\""
        ;;

      'aac'|'m4a'|'mp4')
        eval "faad --quiet --downmix -o- \"${p_src}\" | lame --silent ${LAME_OPTS} ${tags} - \"${p_dst}\""
        ;;

      'flac')
        eval "flac -F --silent --decode --stdout \"${p_src}\" | lame --silent ${LAME_OPTS} ${tags} - \"${p_dst}\""
        ;;

    esac
  fi
}

## Main

# Check/create ID3 comment
[ "${LAME_COMMENT}" == "#AUTO#" ] && LAME_COMMENT="Transcoded with ${0##*/} (${LAME_OPTS})"

# Trap signals
trap 'echo "INTERRUPT[${SCRIPT}($$)]: Cleaning and aborting" >&2; rm -f "${DST_LOCK}" "${p_dst}"; exit 2' INT TERM

# Loop through audio files
if [ -f "${SRC}" ]; then
  p_src="${SRC}"
  p_dst="${DST%.*}.mp3"

  # Transcoding
  if ! __transcode "${p_src}" "${p_dst}"; then
    echo "ERROR[${SCRIPT}($$)]: An error occured while transcoding (${p_src} -> ${p_dst}); skipping..." >&2
    exit 1
  fi
else
  echo "INFO[${SCRIPT}($$)]: Looking for files to transcode..."
  IFS=$'\n'
  for p_src in $(eval "find '${SRC}' \( -type f -o -type l \) \( -iname '*.wav' -o -iname '*.mp3' ${AAC_INCL:+-o -iname '*.aac' -o -iname '*.m4a' -o -iname '*.mp4'} ${FLAC_INCL:+-o -iname '*.flac'} \)" | sort); do
    # Compute source parameters
    d_src="$(dirname "${p_src}")"
    [ -e "${d_src}/.nodownsample" ] && continue

    # Compute destination parameters
    p_dst="${p_src%.*}.mp3"
    p_dst="${DST}/${p_dst#${SRC}/}"
    d_dst="$(dirname "${p_dst}")"

    # Check/create destination directory
    [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
    [ ! -d "${d_dst}" ] && echo "WARNING[${SCRIPT}($$)]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
    [ ! -w "${d_dst}" ] && echo "WARNING[${SCRIPT}($$)]: Unable to write to destination directory (${d_dst}): skipping..." >&2 && continue

    # Check destination file
    __atomic_begin
    [ -e "${p_dst}" ] && __atomic_end && continue
    touch "${p_dst}"
    __atomic_end

    # Transcoding
    if ! __transcode "${p_src}" "${p_dst}"; then
      echo "WARNING[${SCRIPT}($$)]: An error occured while transcoding (${p_src} -> ${p_dst}); skipping..." >&2
      continue
    fi
  done
fi

# Done
echo "INFO[${SCRIPT}($$)]: Done"
exit 0
